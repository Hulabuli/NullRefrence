//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace GUI.GUI_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::GUI.GUI_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::GUI.GUI_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::GUI.GUI_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::Windows.Foundation.Metadata.DefaultOverload]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::GUI.GUI_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::GUI.GUI_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[113];
            _typeNameTable[0] = "Microsoft.UI.Xaml.Controls.NavigationView";
            _typeNameTable[1] = "Microsoft.UI.Xaml.Controls.ContentControl";
            _typeNameTable[2] = "Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode";
            _typeNameTable[3] = "System.Enum";
            _typeNameTable[4] = "System.ValueType";
            _typeNameTable[5] = "Object";
            _typeNameTable[6] = "Boolean";
            _typeNameTable[7] = "Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible";
            _typeNameTable[8] = "Double";
            _typeNameTable[9] = "System.Collections.Generic.IList`1<Object>";
            _typeNameTable[10] = "Microsoft.UI.Xaml.Controls.AutoSuggestBox";
            _typeNameTable[11] = "Microsoft.UI.Xaml.UIElement";
            _typeNameTable[12] = "Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode";
            _typeNameTable[13] = "Microsoft.UI.Xaml.DataTemplate";
            _typeNameTable[14] = "Microsoft.UI.Xaml.Style";
            _typeNameTable[15] = "Microsoft.UI.Xaml.Controls.StyleSelector";
            _typeNameTable[16] = "Microsoft.UI.Xaml.Controls.DataTemplateSelector";
            _typeNameTable[17] = "Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode";
            _typeNameTable[18] = "String";
            _typeNameTable[19] = "Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus";
            _typeNameTable[20] = "Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled";
            _typeNameTable[21] = "Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings";
            _typeNameTable[22] = "Microsoft.UI.Xaml.DependencyObject";
            _typeNameTable[23] = "Microsoft.UI.Xaml.Controls.NavigationViewItem";
            _typeNameTable[24] = "Microsoft.UI.Xaml.Controls.NavigationViewItemBase";
            _typeNameTable[25] = "Microsoft.UI.Xaml.Controls.IconElement";
            _typeNameTable[26] = "GUI.MainNavigationWindow";
            _typeNameTable[27] = "Microsoft.UI.Xaml.Window";
            _typeNameTable[28] = "GUI.Pages.ChartPage";
            _typeNameTable[29] = "Microsoft.UI.Xaml.Controls.Page";
            _typeNameTable[30] = "Microsoft.UI.Xaml.Controls.UserControl";
            _typeNameTable[31] = "Microsoft.UI.Xaml.Controls.NumberBox";
            _typeNameTable[32] = "Microsoft.UI.Xaml.Controls.Control";
            _typeNameTable[33] = "Microsoft.UI.Xaml.Controls.NumberBoxSpinButtonPlacementMode";
            _typeNameTable[34] = "Windows.Globalization.NumberFormatting.INumberFormatter2";
            _typeNameTable[35] = "Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase";
            _typeNameTable[36] = "Microsoft.UI.Xaml.Media.SolidColorBrush";
            _typeNameTable[37] = "Microsoft.UI.Xaml.TextReadingOrder";
            _typeNameTable[38] = "Microsoft.UI.Xaml.Controls.NumberBoxValidationMode";
            _typeNameTable[39] = "GUI.Pages.ControlCenterPage";
            _typeNameTable[40] = "GUI.Pages.GroupStatisticsPage";
            _typeNameTable[41] = "GUI.Pages.HomePage";
            _typeNameTable[42] = "GUI.Pages.SensorValuePage";
            _typeNameTable[43] = "GUI.Pages.SessionControlPage";
            _typeNameTable[44] = "Syncfusion.UI.Xaml.Editors.SfTimePicker";
            _typeNameTable[45] = "Syncfusion.UI.Xaml.Editors.DateTimePickerBase";
            _typeNameTable[46] = "Syncfusion.UI.Xaml.Editors.SfDropDownBase";
            _typeNameTable[47] = "System.Nullable`1<System.DateTimeOffset>";
            _typeNameTable[48] = "System.DateTimeOffset";
            _typeNameTable[49] = "Int32";
            _typeNameTable[50] = "Syncfusion.UI.Xaml.Editors.DateTimeOffsetCollection";
            _typeNameTable[51] = "System.Collections.ObjectModel.ObservableCollection`1<System.DateTimeOffset>";
            _typeNameTable[52] = "System.Collections.ObjectModel.Collection`1<System.DateTimeOffset>";
            _typeNameTable[53] = "System.DateTime";
            _typeNameTable[54] = "System.DayOfWeek";
            _typeNameTable[55] = "TimeSpan";
            _typeNameTable[56] = "Int64";
            _typeNameTable[57] = "Syncfusion.UI.Xaml.Editors.DateTimeEditMode";
            _typeNameTable[58] = "Syncfusion.UI.Xaml.Editors.DropDownMode";
            _typeNameTable[59] = "Microsoft.UI.Xaml.Controls.Primitives.FlyoutPlacementMode";
            _typeNameTable[60] = "GUI.Pages.SessionControl.AdvancedSessionPage";
            _typeNameTable[61] = "GUI.Converters.IdConverter";
            _typeNameTable[62] = "GUI.Converters.UnitConverter";
            _typeNameTable[63] = "GUI.UserControls.ChannelBlockUC";
            _typeNameTable[64] = "Syncfusion.UI.Xaml.Charts.SfCartesianChart";
            _typeNameTable[65] = "Syncfusion.UI.Xaml.Charts.ChartBase";
            _typeNameTable[66] = "Syncfusion.UI.Xaml.Charts.CartesianSeriesCollection";
            _typeNameTable[67] = "System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.CartesianSeries>";
            _typeNameTable[68] = "System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.CartesianSeries>";
            _typeNameTable[69] = "Syncfusion.UI.Xaml.Charts.CartesianSeries";
            _typeNameTable[70] = "Syncfusion.UI.Xaml.Charts.DataMarkerSeries";
            _typeNameTable[71] = "Syncfusion.UI.Xaml.Charts.ChartSeries";
            _typeNameTable[72] = "Syncfusion.UI.Xaml.Charts.ChartSeriesBase";
            _typeNameTable[73] = "Syncfusion.UI.Xaml.Charts.CartesianDataLabelSettings";
            _typeNameTable[74] = "Syncfusion.UI.Xaml.Charts.ChartDataLabelSettings";
            _typeNameTable[75] = "Syncfusion.UI.Xaml.Charts.DoubleRange";
            _typeNameTable[76] = "Syncfusion.UI.Xaml.Charts.ChartAxisBase2D";
            _typeNameTable[77] = "Syncfusion.UI.Xaml.Charts.ChartAxis";
            _typeNameTable[78] = "Syncfusion.UI.Xaml.Charts.RangeAxisBase";
            _typeNameTable[79] = "Microsoft.UI.Xaml.Media.Brush";
            _typeNameTable[80] = "Syncfusion.UI.Xaml.Charts.ChartColorPalette";
            _typeNameTable[81] = "Syncfusion.UI.Xaml.Charts.ChartLegendIcon";
            _typeNameTable[82] = "Microsoft.UI.Xaml.Visibility";
            _typeNameTable[83] = "Syncfusion.UI.Xaml.Charts.ChartColorModel";
            _typeNameTable[84] = "Syncfusion.UI.Xaml.Charts.ChartBehaviorsCollection";
            _typeNameTable[85] = "System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartBehavior>";
            _typeNameTable[86] = "System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartBehavior>";
            _typeNameTable[87] = "Syncfusion.UI.Xaml.Charts.ChartBehavior";
            _typeNameTable[88] = "Microsoft.UI.Xaml.Controls.Canvas";
            _typeNameTable[89] = "Syncfusion.UI.Xaml.Charts.ChartAxisCollection";
            _typeNameTable[90] = "System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartAxis>";
            _typeNameTable[91] = "System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartAxis>";
            _typeNameTable[92] = "Windows.Foundation.Rect";
            _typeNameTable[93] = "Syncfusion.UI.Xaml.Charts.AxisElementPosition";
            _typeNameTable[94] = "Syncfusion.UI.Xaml.Charts.AxisLabelIntersectAction";
            _typeNameTable[95] = "Syncfusion.UI.Xaml.Charts.LabelStyle";
            _typeNameTable[96] = "System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartAxisLabel>";
            _typeNameTable[97] = "System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartAxisLabel>";
            _typeNameTable[98] = "Syncfusion.UI.Xaml.Charts.ChartAxisLabel";
            _typeNameTable[99] = "Syncfusion.UI.Xaml.Charts.EdgeLabelsDrawingMode";
            _typeNameTable[100] = "Syncfusion.UI.Xaml.Charts.EdgeLabelsVisibilityMode";
            _typeNameTable[101] = "Syncfusion.UI.Xaml.Charts.ChartAxisLabelCollection";
            _typeNameTable[102] = "Microsoft.UI.Xaml.Thickness";
            _typeNameTable[103] = "Syncfusion.UI.Xaml.Charts.ChartVisibleSeriesCollection";
            _typeNameTable[104] = "System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartSeriesBase>";
            _typeNameTable[105] = "System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartSeriesBase>";
            _typeNameTable[106] = "Microsoft.UI.Xaml.HorizontalAlignment";
            _typeNameTable[107] = "Microsoft.UI.Xaml.VerticalAlignment";
            _typeNameTable[108] = "Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior";
            _typeNameTable[109] = "Syncfusion.UI.Xaml.Charts.ZoomMode";
            _typeNameTable[110] = "GUI.UserControls.ChartUC";
            _typeNameTable[111] = "Syncfusion.UI.Xaml.Core.DoubleToObjectConverter";
            _typeNameTable[112] = "Syncfusion.UI.Xaml.Core.DoubleToVisibilityConverter";

            _typeTable = new global::System.Type[113];
            _typeTable[0] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationView);
            _typeTable[1] = typeof(global::Microsoft.UI.Xaml.Controls.ContentControl);
            _typeTable[2] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode);
            _typeTable[3] = typeof(global::System.Enum);
            _typeTable[4] = typeof(global::System.ValueType);
            _typeTable[5] = typeof(global::System.Object);
            _typeTable[6] = typeof(global::System.Boolean);
            _typeTable[7] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible);
            _typeTable[8] = typeof(global::System.Double);
            _typeTable[9] = typeof(global::System.Collections.Generic.IList<global::System.Object>);
            _typeTable[10] = typeof(global::Microsoft.UI.Xaml.Controls.AutoSuggestBox);
            _typeTable[11] = typeof(global::Microsoft.UI.Xaml.UIElement);
            _typeTable[12] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode);
            _typeTable[13] = typeof(global::Microsoft.UI.Xaml.DataTemplate);
            _typeTable[14] = typeof(global::Microsoft.UI.Xaml.Style);
            _typeTable[15] = typeof(global::Microsoft.UI.Xaml.Controls.StyleSelector);
            _typeTable[16] = typeof(global::Microsoft.UI.Xaml.Controls.DataTemplateSelector);
            _typeTable[17] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode);
            _typeTable[18] = typeof(global::System.String);
            _typeTable[19] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus);
            _typeTable[20] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled);
            _typeTable[21] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings);
            _typeTable[22] = typeof(global::Microsoft.UI.Xaml.DependencyObject);
            _typeTable[23] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewItem);
            _typeTable[24] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewItemBase);
            _typeTable[25] = typeof(global::Microsoft.UI.Xaml.Controls.IconElement);
            _typeTable[26] = typeof(global::GUI.MainNavigationWindow);
            _typeTable[27] = typeof(global::Microsoft.UI.Xaml.Window);
            _typeTable[28] = typeof(global::GUI.Pages.ChartPage);
            _typeTable[29] = typeof(global::Microsoft.UI.Xaml.Controls.Page);
            _typeTable[30] = typeof(global::Microsoft.UI.Xaml.Controls.UserControl);
            _typeTable[31] = typeof(global::Microsoft.UI.Xaml.Controls.NumberBox);
            _typeTable[32] = typeof(global::Microsoft.UI.Xaml.Controls.Control);
            _typeTable[33] = typeof(global::Microsoft.UI.Xaml.Controls.NumberBoxSpinButtonPlacementMode);
            _typeTable[34] = typeof(global::Windows.Globalization.NumberFormatting.INumberFormatter2);
            _typeTable[35] = typeof(global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase);
            _typeTable[36] = typeof(global::Microsoft.UI.Xaml.Media.SolidColorBrush);
            _typeTable[37] = typeof(global::Microsoft.UI.Xaml.TextReadingOrder);
            _typeTable[38] = typeof(global::Microsoft.UI.Xaml.Controls.NumberBoxValidationMode);
            _typeTable[39] = typeof(global::GUI.Pages.ControlCenterPage);
            _typeTable[40] = typeof(global::GUI.Pages.GroupStatisticsPage);
            _typeTable[41] = typeof(global::GUI.Pages.HomePage);
            _typeTable[42] = typeof(global::GUI.Pages.SensorValuePage);
            _typeTable[43] = typeof(global::GUI.Pages.SessionControlPage);
            _typeTable[44] = typeof(global::Syncfusion.UI.Xaml.Editors.SfTimePicker);
            _typeTable[45] = typeof(global::Syncfusion.UI.Xaml.Editors.DateTimePickerBase);
            _typeTable[46] = typeof(global::Syncfusion.UI.Xaml.Editors.SfDropDownBase);
            _typeTable[47] = typeof(global::System.Nullable<global::System.DateTimeOffset>);
            _typeTable[48] = typeof(global::System.DateTimeOffset);
            _typeTable[49] = typeof(global::System.Int32);
            _typeTable[50] = typeof(global::Syncfusion.UI.Xaml.Editors.DateTimeOffsetCollection);
            _typeTable[51] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::System.DateTimeOffset>);
            _typeTable[52] = typeof(global::System.Collections.ObjectModel.Collection<global::System.DateTimeOffset>);
            _typeTable[53] = typeof(global::System.DateTime);
            _typeTable[54] = typeof(global::System.DayOfWeek);
            _typeTable[55] = typeof(global::System.TimeSpan);
            _typeTable[56] = typeof(global::System.Int64);
            _typeTable[57] = typeof(global::Syncfusion.UI.Xaml.Editors.DateTimeEditMode);
            _typeTable[58] = typeof(global::Syncfusion.UI.Xaml.Editors.DropDownMode);
            _typeTable[59] = typeof(global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutPlacementMode);
            _typeTable[60] = typeof(global::GUI.Pages.SessionControl.AdvancedSessionPage);
            _typeTable[61] = typeof(global::GUI.Converters.IdConverter);
            _typeTable[62] = typeof(global::GUI.Converters.UnitConverter);
            _typeTable[63] = typeof(global::GUI.UserControls.ChannelBlockUC);
            _typeTable[64] = typeof(global::Syncfusion.UI.Xaml.Charts.SfCartesianChart);
            _typeTable[65] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartBase);
            _typeTable[66] = typeof(global::Syncfusion.UI.Xaml.Charts.CartesianSeriesCollection);
            _typeTable[67] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.Charts.CartesianSeries>);
            _typeTable[68] = typeof(global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.Charts.CartesianSeries>);
            _typeTable[69] = typeof(global::Syncfusion.UI.Xaml.Charts.CartesianSeries);
            _typeTable[70] = typeof(global::Syncfusion.UI.Xaml.Charts.DataMarkerSeries);
            _typeTable[71] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartSeries);
            _typeTable[72] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase);
            _typeTable[73] = typeof(global::Syncfusion.UI.Xaml.Charts.CartesianDataLabelSettings);
            _typeTable[74] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartDataLabelSettings);
            _typeTable[75] = typeof(global::Syncfusion.UI.Xaml.Charts.DoubleRange);
            _typeTable[76] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartAxisBase2D);
            _typeTable[77] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartAxis);
            _typeTable[78] = typeof(global::Syncfusion.UI.Xaml.Charts.RangeAxisBase);
            _typeTable[79] = typeof(global::Microsoft.UI.Xaml.Media.Brush);
            _typeTable[80] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartColorPalette);
            _typeTable[81] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartLegendIcon);
            _typeTable[82] = typeof(global::Microsoft.UI.Xaml.Visibility);
            _typeTable[83] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartColorModel);
            _typeTable[84] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartBehaviorsCollection);
            _typeTable[85] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.Charts.ChartBehavior>);
            _typeTable[86] = typeof(global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.Charts.ChartBehavior>);
            _typeTable[87] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartBehavior);
            _typeTable[88] = typeof(global::Microsoft.UI.Xaml.Controls.Canvas);
            _typeTable[89] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartAxisCollection);
            _typeTable[90] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.Charts.ChartAxis>);
            _typeTable[91] = typeof(global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.Charts.ChartAxis>);
            _typeTable[92] = typeof(global::Windows.Foundation.Rect);
            _typeTable[93] = typeof(global::Syncfusion.UI.Xaml.Charts.AxisElementPosition);
            _typeTable[94] = typeof(global::Syncfusion.UI.Xaml.Charts.AxisLabelIntersectAction);
            _typeTable[95] = typeof(global::Syncfusion.UI.Xaml.Charts.LabelStyle);
            _typeTable[96] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel>);
            _typeTable[97] = typeof(global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel>);
            _typeTable[98] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel);
            _typeTable[99] = typeof(global::Syncfusion.UI.Xaml.Charts.EdgeLabelsDrawingMode);
            _typeTable[100] = typeof(global::Syncfusion.UI.Xaml.Charts.EdgeLabelsVisibilityMode);
            _typeTable[101] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartAxisLabelCollection);
            _typeTable[102] = typeof(global::Microsoft.UI.Xaml.Thickness);
            _typeTable[103] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartVisibleSeriesCollection);
            _typeTable[104] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase>);
            _typeTable[105] = typeof(global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase>);
            _typeTable[106] = typeof(global::Microsoft.UI.Xaml.HorizontalAlignment);
            _typeTable[107] = typeof(global::Microsoft.UI.Xaml.VerticalAlignment);
            _typeTable[108] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior);
            _typeTable[109] = typeof(global::Syncfusion.UI.Xaml.Charts.ZoomMode);
            _typeTable[110] = typeof(global::GUI.UserControls.ChartUC);
            _typeTable[111] = typeof(global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter);
            _typeTable[112] = typeof(global::Syncfusion.UI.Xaml.Core.DoubleToVisibilityConverter);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_NavigationView() { return new global::Microsoft.UI.Xaml.Controls.NavigationView(); }
        private object Activate_21_NavigationViewTemplateSettings() { return new global::Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings(); }
        private object Activate_23_NavigationViewItem() { return new global::Microsoft.UI.Xaml.Controls.NavigationViewItem(); }
        private object Activate_31_NumberBox() { return new global::Microsoft.UI.Xaml.Controls.NumberBox(); }
        private object Activate_44_SfTimePicker() { return new global::Syncfusion.UI.Xaml.Editors.SfTimePicker(); }
        private object Activate_45_DateTimePickerBase() { return new global::Syncfusion.UI.Xaml.Editors.DateTimePickerBase(); }
        private object Activate_50_DateTimeOffsetCollection() { return new global::Syncfusion.UI.Xaml.Editors.DateTimeOffsetCollection(); }
        private object Activate_51_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::System.DateTimeOffset>(); }
        private object Activate_52_Collection() { return new global::System.Collections.ObjectModel.Collection<global::System.DateTimeOffset>(); }
        private object Activate_61_IdConverter() { return new global::GUI.Converters.IdConverter(); }
        private object Activate_62_UnitConverter() { return new global::GUI.Converters.UnitConverter(); }
        private object Activate_64_SfCartesianChart() { return new global::Syncfusion.UI.Xaml.Charts.SfCartesianChart(); }
        private object Activate_66_CartesianSeriesCollection() { return new global::Syncfusion.UI.Xaml.Charts.CartesianSeriesCollection(); }
        private object Activate_67_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.Charts.CartesianSeries>(); }
        private object Activate_68_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.Charts.CartesianSeries>(); }
        private object Activate_73_CartesianDataLabelSettings() { return new global::Syncfusion.UI.Xaml.Charts.CartesianDataLabelSettings(); }
        private object Activate_83_ChartColorModel() { return new global::Syncfusion.UI.Xaml.Charts.ChartColorModel(); }
        private object Activate_84_ChartBehaviorsCollection() { return new global::Syncfusion.UI.Xaml.Charts.ChartBehaviorsCollection(); }
        private object Activate_85_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.Charts.ChartBehavior>(); }
        private object Activate_86_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.Charts.ChartBehavior>(); }
        private object Activate_89_ChartAxisCollection() { return new global::Syncfusion.UI.Xaml.Charts.ChartAxisCollection(); }
        private object Activate_90_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.Charts.ChartAxis>(); }
        private object Activate_91_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.Charts.ChartAxis>(); }
        private object Activate_95_LabelStyle() { return new global::Syncfusion.UI.Xaml.Charts.LabelStyle(); }
        private object Activate_96_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel>(); }
        private object Activate_97_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel>(); }
        private object Activate_98_ChartAxisLabel() { return new global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel(); }
        private object Activate_101_ChartAxisLabelCollection() { return new global::Syncfusion.UI.Xaml.Charts.ChartAxisLabelCollection(); }
        private object Activate_103_ChartVisibleSeriesCollection() { return new global::Syncfusion.UI.Xaml.Charts.ChartVisibleSeriesCollection(); }
        private object Activate_104_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase>(); }
        private object Activate_105_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase>(); }
        private object Activate_108_ChartZoomPanBehavior() { return new global::Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior(); }
        private object Activate_111_DoubleToObjectConverter() { return new global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter(); }
        private object Activate_112_DoubleToVisibilityConverter() { return new global::Syncfusion.UI.Xaml.Core.DoubleToVisibilityConverter(); }
        private void VectorAdd_9_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }
        private void VectorAdd_50_DateTimeOffsetCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.DateTimeOffset>)instance;
            var newItem = (global::System.DateTimeOffset)item;
            collection.Add(newItem);
        }
        private void VectorAdd_51_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.DateTimeOffset>)instance;
            var newItem = (global::System.DateTimeOffset)item;
            collection.Add(newItem);
        }
        private void VectorAdd_52_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.DateTimeOffset>)instance;
            var newItem = (global::System.DateTimeOffset)item;
            collection.Add(newItem);
        }
        private void VectorAdd_66_CartesianSeriesCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.CartesianSeries>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.CartesianSeries)item;
            collection.Add(newItem);
        }
        private void VectorAdd_67_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.CartesianSeries>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.CartesianSeries)item;
            collection.Add(newItem);
        }
        private void VectorAdd_68_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.CartesianSeries>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.CartesianSeries)item;
            collection.Add(newItem);
        }
        private void VectorAdd_84_ChartBehaviorsCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartBehavior>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartBehavior)item;
            collection.Add(newItem);
        }
        private void VectorAdd_85_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartBehavior>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartBehavior)item;
            collection.Add(newItem);
        }
        private void VectorAdd_86_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartBehavior>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartBehavior)item;
            collection.Add(newItem);
        }
        private void VectorAdd_89_ChartAxisCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartAxis>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)item;
            collection.Add(newItem);
        }
        private void VectorAdd_90_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartAxis>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)item;
            collection.Add(newItem);
        }
        private void VectorAdd_91_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartAxis>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)item;
            collection.Add(newItem);
        }
        private void VectorAdd_96_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel)item;
            collection.Add(newItem);
        }
        private void VectorAdd_97_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel)item;
            collection.Add(newItem);
        }
        private void VectorAdd_101_ChartAxisLabelCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel)item;
            collection.Add(newItem);
        }
        private void VectorAdd_103_ChartVisibleSeriesCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_104_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_105_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)item;
            collection.Add(newItem);
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::GUI.GUI_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Microsoft.UI.Xaml.Controls.NavigationView
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_0_NavigationView;
                userType.AddMemberName("PaneDisplayMode");
                userType.AddMemberName("IsPaneToggleButtonVisible");
                userType.AddMemberName("IsSettingsVisible");
                userType.AddMemberName("IsBackButtonVisible");
                userType.AddMemberName("CompactPaneLength");
                userType.AddMemberName("MenuItems");
                userType.AddMemberName("AlwaysShowHeader");
                userType.AddMemberName("AutoSuggestBox");
                userType.AddMemberName("CompactModeThresholdWidth");
                userType.AddMemberName("ContentOverlay");
                userType.AddMemberName("DisplayMode");
                userType.AddMemberName("ExpandedModeThresholdWidth");
                userType.AddMemberName("FooterMenuItems");
                userType.AddMemberName("FooterMenuItemsSource");
                userType.AddMemberName("Header");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("IsBackEnabled");
                userType.AddMemberName("IsPaneOpen");
                userType.AddMemberName("IsPaneVisible");
                userType.AddMemberName("IsTitleBarAutoPaddingEnabled");
                userType.AddMemberName("MenuItemContainerStyle");
                userType.AddMemberName("MenuItemContainerStyleSelector");
                userType.AddMemberName("MenuItemTemplate");
                userType.AddMemberName("MenuItemTemplateSelector");
                userType.AddMemberName("MenuItemsSource");
                userType.AddMemberName("OpenPaneLength");
                userType.AddMemberName("OverflowLabelMode");
                userType.AddMemberName("PaneCustomContent");
                userType.AddMemberName("PaneFooter");
                userType.AddMemberName("PaneHeader");
                userType.AddMemberName("PaneTitle");
                userType.AddMemberName("PaneToggleButtonStyle");
                userType.AddMemberName("SelectedItem");
                userType.AddMemberName("SelectionFollowsFocus");
                userType.AddMemberName("SettingsItem");
                userType.AddMemberName("ShoulderNavigationEnabled");
                userType.AddMemberName("TemplateSettings");
                xamlType = userType;
                break;

            case 1:   //  Microsoft.UI.Xaml.Controls.ContentControl
                xamlType = new global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.Auto);
                userType.AddEnumValue("Left", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.Left);
                userType.AddEnumValue("Top", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.Top);
                userType.AddEnumValue("LeftCompact", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.LeftCompact);
                userType.AddEnumValue("LeftMinimal", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.LeftMinimal);
                xamlType = userType;
                break;

            case 3:   //  System.Enum
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 4:   //  System.ValueType
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 5:   //  Object
                xamlType = new global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Boolean
                xamlType = new global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Collapsed", global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible.Collapsed);
                userType.AddEnumValue("Visible", global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible.Visible);
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible.Auto);
                xamlType = userType;
                break;

            case 8:   //  Double
                xamlType = new global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  System.Collections.Generic.IList`1<Object>
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_9_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 10:   //  Microsoft.UI.Xaml.Controls.AutoSuggestBox
                xamlType = new global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  Microsoft.UI.Xaml.UIElement
                xamlType = new global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Minimal", global::Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode.Minimal);
                userType.AddEnumValue("Compact", global::Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode.Compact);
                userType.AddEnumValue("Expanded", global::Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode.Expanded);
                xamlType = userType;
                break;

            case 13:   //  Microsoft.UI.Xaml.DataTemplate
                xamlType = new global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  Microsoft.UI.Xaml.Style
                xamlType = new global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  Microsoft.UI.Xaml.Controls.StyleSelector
                xamlType = new global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  Microsoft.UI.Xaml.Controls.DataTemplateSelector
                xamlType = new global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("MoreLabel", global::Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode.MoreLabel);
                userType.AddEnumValue("NoLabel", global::Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode.NoLabel);
                xamlType = userType;
                break;

            case 18:   //  String
                xamlType = new global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Disabled", global::Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus.Disabled);
                userType.AddEnumValue("Enabled", global::Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus.Enabled);
                xamlType = userType;
                break;

            case 20:   //  Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("WhenSelectionFollowsFocus", global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled.WhenSelectionFollowsFocus);
                userType.AddEnumValue("Always", global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled.Always);
                userType.AddEnumValue("Never", global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled.Never);
                xamlType = userType;
                break;

            case 21:   //  Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 22:   //  Microsoft.UI.Xaml.DependencyObject
                xamlType = new global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 23:   //  Microsoft.UI.Xaml.Controls.NavigationViewItem
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItemBase"));
                userType.Activator = Activate_23_NavigationViewItem;
                userType.AddMemberName("Icon");
                userType.AddMemberName("CompactPaneLength");
                userType.AddMemberName("HasUnrealizedChildren");
                userType.AddMemberName("IsChildSelected");
                userType.AddMemberName("IsExpanded");
                userType.AddMemberName("MenuItems");
                userType.AddMemberName("MenuItemsSource");
                userType.AddMemberName("SelectsOnInvoked");
                xamlType = userType;
                break;

            case 24:   //  Microsoft.UI.Xaml.Controls.NavigationViewItemBase
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.AddMemberName("IsSelected");
                xamlType = userType;
                break;

            case 25:   //  Microsoft.UI.Xaml.Controls.IconElement
                xamlType = new global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  GUI.MainNavigationWindow
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Window"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 27:   //  Microsoft.UI.Xaml.Window
                xamlType = new global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 28:   //  GUI.Pages.ChartPage
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  Microsoft.UI.Xaml.Controls.Page
                xamlType = new global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 30:   //  Microsoft.UI.Xaml.Controls.UserControl
                xamlType = new global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 31:   //  Microsoft.UI.Xaml.Controls.NumberBox
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_31_NumberBox;
                userType.AddMemberName("Value");
                userType.AddMemberName("SpinButtonPlacementMode");
                userType.AddMemberName("SmallChange");
                userType.AddMemberName("AcceptsExpression");
                userType.AddMemberName("Description");
                userType.AddMemberName("Header");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("IsWrapEnabled");
                userType.AddMemberName("LargeChange");
                userType.AddMemberName("Maximum");
                userType.AddMemberName("Minimum");
                userType.AddMemberName("NumberFormatter");
                userType.AddMemberName("PlaceholderText");
                userType.AddMemberName("PreventKeyboardDisplayOnProgrammaticFocus");
                userType.AddMemberName("SelectionFlyout");
                userType.AddMemberName("SelectionHighlightColor");
                userType.AddMemberName("Text");
                userType.AddMemberName("TextReadingOrder");
                userType.AddMemberName("ValidationMode");
                xamlType = userType;
                break;

            case 32:   //  Microsoft.UI.Xaml.Controls.Control
                xamlType = new global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 33:   //  Microsoft.UI.Xaml.Controls.NumberBoxSpinButtonPlacementMode
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Hidden", global::Microsoft.UI.Xaml.Controls.NumberBoxSpinButtonPlacementMode.Hidden);
                userType.AddEnumValue("Compact", global::Microsoft.UI.Xaml.Controls.NumberBoxSpinButtonPlacementMode.Compact);
                userType.AddEnumValue("Inline", global::Microsoft.UI.Xaml.Controls.NumberBoxSpinButtonPlacementMode.Inline);
                xamlType = userType;
                break;

            case 34:   //  Windows.Globalization.NumberFormatting.INumberFormatter2
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 35:   //  Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase
                xamlType = new global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 36:   //  Microsoft.UI.Xaml.Media.SolidColorBrush
                xamlType = new global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 37:   //  Microsoft.UI.Xaml.TextReadingOrder
                xamlType = new global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 38:   //  Microsoft.UI.Xaml.Controls.NumberBoxValidationMode
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("InvalidInputOverwritten", global::Microsoft.UI.Xaml.Controls.NumberBoxValidationMode.InvalidInputOverwritten);
                userType.AddEnumValue("Disabled", global::Microsoft.UI.Xaml.Controls.NumberBoxValidationMode.Disabled);
                xamlType = userType;
                break;

            case 39:   //  GUI.Pages.ControlCenterPage
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 40:   //  GUI.Pages.GroupStatisticsPage
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 41:   //  GUI.Pages.HomePage
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 42:   //  GUI.Pages.SensorValuePage
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 43:   //  GUI.Pages.SessionControlPage
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 44:   //  Syncfusion.UI.Xaml.Editors.SfTimePicker
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.DateTimePickerBase"));
                userType.Activator = Activate_44_SfTimePicker;
                userType.SetContentPropertyName("Syncfusion.UI.Xaml.Editors.SfDropDownBase.Content");
                userType.AddMemberName("DisplayTimeFormat");
                userType.AddMemberName("SelectedTime");
                userType.AddMemberName("MinTime");
                userType.AddMemberName("MaxTime");
                userType.AddMemberName("VisibleItemsCount");
                userType.AddMemberName("ShowColumnHeaders");
                userType.AddMemberName("ItemWidth");
                userType.AddMemberName("MinItemWidth");
                userType.AddMemberName("MaxItemWidth");
                userType.AddMemberName("ItemHeight");
                userType.AddMemberName("DropDownHeaderTemplate");
                userType.AddMemberName("DropDownHeader");
                userType.AddMemberName("ShowDropDownHeader");
                userType.AddMemberName("PlaceholderText");
                userType.AddMemberName("ItemTemplate");
                userType.AddMemberName("ItemContainerStyle");
                userType.AddMemberName("ItemTemplateSelector");
                userType.AddMemberName("BlackoutTimes");
                userType.AddMemberName("ClockIdentifier");
                xamlType = userType;
                break;

            case 45:   //  Syncfusion.UI.Xaml.Editors.DateTimePickerBase
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.SfDropDownBase"));
                userType.Activator = Activate_45_DateTimePickerBase;
                userType.SetContentPropertyName("Syncfusion.UI.Xaml.Editors.SfDropDownBase.Content");
                userType.AddMemberName("AllowNull");
                userType.AddMemberName("EditMode");
                userType.AddMemberName("ShowClearButton");
                userType.AddMemberName("Header");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("Description");
                xamlType = userType;
                break;

            case 46:   //  Syncfusion.UI.Xaml.Editors.SfDropDownBase
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.SetContentPropertyName("Syncfusion.UI.Xaml.Editors.SfDropDownBase.Content");
                userType.AddMemberName("Content");
                userType.AddMemberName("ContentTemplate");
                userType.AddMemberName("DropDownButtonTemplate");
                userType.AddMemberName("DropDownHeight");
                userType.AddMemberName("DropDownMode");
                userType.AddMemberName("DropDownPlacement");
                userType.AddMemberName("IsOpen");
                userType.AddMemberName("ShowDropDownButton");
                userType.AddMemberName("ShowSubmitButtons");
                xamlType = userType;
                break;

            case 47:   //  System.Nullable`1<System.DateTimeOffset>
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetBoxedType(GetXamlTypeByName("System.DateTimeOffset"));
                userType.BoxInstance = userType.BoxType<global::System.DateTimeOffset>;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 48:   //  System.DateTimeOffset
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("Date");
                userType.AddMemberName("DateTime");
                userType.AddMemberName("Day");
                userType.AddMemberName("DayOfWeek");
                userType.AddMemberName("DayOfYear");
                userType.AddMemberName("Hour");
                userType.AddMemberName("LocalDateTime");
                userType.AddMemberName("Millisecond");
                userType.AddMemberName("Minute");
                userType.AddMemberName("Month");
                userType.AddMemberName("Offset");
                userType.AddMemberName("Second");
                userType.AddMemberName("Ticks");
                userType.AddMemberName("TimeOfDay");
                userType.AddMemberName("UtcDateTime");
                userType.AddMemberName("UtcTicks");
                userType.AddMemberName("Year");
                xamlType = userType;
                break;

            case 49:   //  Int32
                xamlType = new global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 50:   //  Syncfusion.UI.Xaml.Editors.DateTimeOffsetCollection
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<System.DateTimeOffset>"));
                userType.CollectionAdd = VectorAdd_50_DateTimeOffsetCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 51:   //  System.Collections.ObjectModel.ObservableCollection`1<System.DateTimeOffset>
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<System.DateTimeOffset>"));
                userType.Activator = Activate_51_ObservableCollection;
                userType.CollectionAdd = VectorAdd_51_ObservableCollection;
                xamlType = userType;
                break;

            case 52:   //  System.Collections.ObjectModel.Collection`1<System.DateTimeOffset>
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_52_Collection;
                userType.CollectionAdd = VectorAdd_52_Collection;
                xamlType = userType;
                break;

            case 53:   //  System.DateTime
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 54:   //  System.DayOfWeek
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Sunday", global::System.DayOfWeek.Sunday);
                userType.AddEnumValue("Monday", global::System.DayOfWeek.Monday);
                userType.AddEnumValue("Tuesday", global::System.DayOfWeek.Tuesday);
                userType.AddEnumValue("Wednesday", global::System.DayOfWeek.Wednesday);
                userType.AddEnumValue("Thursday", global::System.DayOfWeek.Thursday);
                userType.AddEnumValue("Friday", global::System.DayOfWeek.Friday);
                userType.AddEnumValue("Saturday", global::System.DayOfWeek.Saturday);
                xamlType = userType;
                break;

            case 55:   //  TimeSpan
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 56:   //  Int64
                xamlType = new global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 57:   //  Syncfusion.UI.Xaml.Editors.DateTimeEditMode
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Syncfusion.UI.Xaml.Editors.DateTimeEditMode.None);
                userType.AddEnumValue("Normal", global::Syncfusion.UI.Xaml.Editors.DateTimeEditMode.Normal);
                userType.AddEnumValue("Mask", global::Syncfusion.UI.Xaml.Editors.DateTimeEditMode.Mask);
                xamlType = userType;
                break;

            case 58:   //  Syncfusion.UI.Xaml.Editors.DropDownMode
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("DropDown", global::Syncfusion.UI.Xaml.Editors.DropDownMode.DropDown);
                userType.AddEnumValue("Split", global::Syncfusion.UI.Xaml.Editors.DropDownMode.Split);
                xamlType = userType;
                break;

            case 59:   //  Microsoft.UI.Xaml.Controls.Primitives.FlyoutPlacementMode
                xamlType = new global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 60:   //  GUI.Pages.SessionControl.AdvancedSessionPage
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 61:   //  GUI.Converters.IdConverter
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_61_IdConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 62:   //  GUI.Converters.UnitConverter
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_62_UnitConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 63:   //  GUI.UserControls.ChannelBlockUC
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 64:   //  Syncfusion.UI.Xaml.Charts.SfCartesianChart
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase"));
                userType.Activator = Activate_64_SfCartesianChart;
                userType.SetContentPropertyName("Syncfusion.UI.Xaml.Charts.SfCartesianChart.Series");
                userType.AddMemberName("Series");
                userType.AddMemberName("PrimaryAxis");
                userType.AddMemberName("Axes");
                userType.AddMemberName("SecondaryAxis");
                userType.AddMemberName("PlotAreaBorderBrush");
                userType.AddMemberName("PlotAreaBorderThickness");
                userType.AddMemberName("PlotAreaBackground");
                userType.AddMemberName("EnableSideBySideSeriesPlacement");
                xamlType = userType;
                break;

            case 65:   //  Syncfusion.UI.Xaml.Charts.ChartBase
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.AddMemberName("Behaviors");
                userType.AddMemberName("SeriesClipRect");
                userType.AddMemberName("VisibleSeries");
                userType.AddMemberName("Palette");
                userType.AddMemberName("SelectedSeriesIndex");
                userType.AddMemberName("Header");
                userType.AddMemberName("HorizontalHeaderAlignment");
                userType.AddMemberName("VerticalHeaderAlignment");
                userType.AddMemberName("ColorModel");
                userType.AddMemberName("Legend");
                xamlType = userType;
                break;

            case 66:   //  Syncfusion.UI.Xaml.Charts.CartesianSeriesCollection
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.CartesianSeries>"));
                userType.CollectionAdd = VectorAdd_66_CartesianSeriesCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 67:   //  System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.CartesianSeries>
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.CartesianSeries>"));
                userType.Activator = Activate_67_ObservableCollection;
                userType.CollectionAdd = VectorAdd_67_ObservableCollection;
                xamlType = userType;
                break;

            case 68:   //  System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.CartesianSeries>
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_68_Collection;
                userType.CollectionAdd = VectorAdd_68_Collection;
                xamlType = userType;
                break;

            case 69:   //  Syncfusion.UI.Xaml.Charts.CartesianSeries
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.DataMarkerSeries"));
                userType.AddMemberName("DataLabelSettings");
                userType.AddMemberName("XRange");
                userType.AddMemberName("YRange");
                userType.AddMemberName("XAxis");
                userType.AddMemberName("YAxis");
                userType.AddMemberName("IsTransposed");
                userType.AddMemberName("ShowTrackballInfo");
                xamlType = userType;
                break;

            case 70:   //  Syncfusion.UI.Xaml.Charts.DataMarkerSeries
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeries"));
                userType.AddMemberName("ShowDataLabels");
                xamlType = userType;
                break;

            case 71:   //  Syncfusion.UI.Xaml.Charts.ChartSeries
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase"));
                userType.AddMemberName("StrokeThickness");
                userType.AddMemberName("Area");
                userType.AddMemberName("Stroke");
                xamlType = userType;
                break;

            case 72:   //  Syncfusion.UI.Xaml.Charts.ChartSeriesBase
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.AddMemberName("DataCount");
                userType.AddMemberName("TooltipTemplate");
                userType.AddMemberName("ShowTooltip");
                userType.AddMemberName("ListenPropertyChange");
                userType.AddMemberName("IsSeriesVisible");
                userType.AddMemberName("Palette");
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("TrackballLabelTemplate");
                userType.AddMemberName("Interior");
                userType.AddMemberName("Label");
                userType.AddMemberName("LegendIcon");
                userType.AddMemberName("LegendIconTemplate");
                userType.AddMemberName("VisibilityOnLegend");
                userType.AddMemberName("ColorModel");
                userType.AddMemberName("XBindingPath");
                userType.AddMemberName("SegmentColorPath");
                userType.AddMemberName("EnableAnimation");
                userType.AddMemberName("AnimationDuration");
                xamlType = userType;
                break;

            case 73:   //  Syncfusion.UI.Xaml.Charts.CartesianDataLabelSettings
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartDataLabelSettings"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 74:   //  Syncfusion.UI.Xaml.Charts.ChartDataLabelSettings
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                xamlType = userType;
                break;

            case 75:   //  Syncfusion.UI.Xaml.Charts.DoubleRange
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 76:   //  Syncfusion.UI.Xaml.Charts.ChartAxisBase2D
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis"));
                xamlType = userType;
                break;

            case 77:   //  Syncfusion.UI.Xaml.Charts.ChartAxis
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.AddMemberName("IsLogarithmic");
                userType.AddMemberName("ActualPlotOffset");
                userType.AddMemberName("MaximumLabels");
                userType.AddMemberName("VisibleRange");
                userType.AddMemberName("ArrangeRect");
                userType.AddMemberName("ContentPath");
                userType.AddMemberName("LabelFormat");
                userType.AddMemberName("PlotOffset");
                userType.AddMemberName("PlotOffsetStart");
                userType.AddMemberName("PlotOffsetEnd");
                userType.AddMemberName("AxisLineOffset");
                userType.AddMemberName("LabelPosition");
                userType.AddMemberName("LabelSource");
                userType.AddMemberName("LabelIntersectAction");
                userType.AddMemberName("LabelExtent");
                userType.AddMemberName("LabelRotationAngle");
                userType.AddMemberName("AxisLineStyle");
                userType.AddMemberName("OpposedPosition");
                userType.AddMemberName("DesiredIntervalsCount");
                userType.AddMemberName("Header");
                userType.AddMemberName("HeaderStyle");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("TickLineSize");
                userType.AddMemberName("VisibleLabels");
                userType.AddMemberName("IsInversed");
                userType.AddMemberName("TickLinesPosition");
                userType.AddMemberName("EdgeLabelsDrawingMode");
                userType.AddMemberName("EdgeLabelsVisibilityMode");
                userType.AddMemberName("MajorGridLineStyle");
                userType.AddMemberName("MinorGridLineStyle");
                userType.AddMemberName("MajorTickLineStyle");
                userType.AddMemberName("MinorTickLineStyle");
                userType.AddMemberName("ShowTrackballInfo");
                userType.AddMemberName("TrackballLabelTemplate");
                userType.AddMemberName("CrosshairLabelTemplate");
                userType.AddMemberName("ShowGridLines");
                userType.AddMemberName("EnableAutoIntervalOnZooming");
                userType.AddMemberName("LabelStyle");
                userType.AddMemberName("LabelTemplate");
                userType.AddMemberName("CustomLabels");
                xamlType = userType;
                break;

            case 78:   //  Syncfusion.UI.Xaml.Charts.RangeAxisBase
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxisBase2D"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 79:   //  Microsoft.UI.Xaml.Media.Brush
                xamlType = new global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 80:   //  Syncfusion.UI.Xaml.Charts.ChartColorPalette
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Syncfusion.UI.Xaml.Charts.ChartColorPalette.None);
                userType.AddEnumValue("Metro", global::Syncfusion.UI.Xaml.Charts.ChartColorPalette.Metro);
                userType.AddEnumValue("Custom", global::Syncfusion.UI.Xaml.Charts.ChartColorPalette.Custom);
                userType.AddEnumValue("AutumnBrights", global::Syncfusion.UI.Xaml.Charts.ChartColorPalette.AutumnBrights);
                userType.AddEnumValue("FloraHues", global::Syncfusion.UI.Xaml.Charts.ChartColorPalette.FloraHues);
                userType.AddEnumValue("Pineapple", global::Syncfusion.UI.Xaml.Charts.ChartColorPalette.Pineapple);
                userType.AddEnumValue("TomatoSpectrum", global::Syncfusion.UI.Xaml.Charts.ChartColorPalette.TomatoSpectrum);
                userType.AddEnumValue("RedChrome", global::Syncfusion.UI.Xaml.Charts.ChartColorPalette.RedChrome);
                userType.AddEnumValue("PurpleChrome", global::Syncfusion.UI.Xaml.Charts.ChartColorPalette.PurpleChrome);
                userType.AddEnumValue("BlueChrome", global::Syncfusion.UI.Xaml.Charts.ChartColorPalette.BlueChrome);
                userType.AddEnumValue("GreenChrome", global::Syncfusion.UI.Xaml.Charts.ChartColorPalette.GreenChrome);
                userType.AddEnumValue("Elite", global::Syncfusion.UI.Xaml.Charts.ChartColorPalette.Elite);
                userType.AddEnumValue("SandyBeach", global::Syncfusion.UI.Xaml.Charts.ChartColorPalette.SandyBeach);
                userType.AddEnumValue("LightCandy", global::Syncfusion.UI.Xaml.Charts.ChartColorPalette.LightCandy);
                xamlType = userType;
                break;

            case 81:   //  Syncfusion.UI.Xaml.Charts.ChartLegendIcon
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Syncfusion.UI.Xaml.Charts.ChartLegendIcon.None);
                userType.AddEnumValue("SeriesType", global::Syncfusion.UI.Xaml.Charts.ChartLegendIcon.SeriesType);
                userType.AddEnumValue("Rectangle", global::Syncfusion.UI.Xaml.Charts.ChartLegendIcon.Rectangle);
                userType.AddEnumValue("StraightLine", global::Syncfusion.UI.Xaml.Charts.ChartLegendIcon.StraightLine);
                userType.AddEnumValue("VerticalLine", global::Syncfusion.UI.Xaml.Charts.ChartLegendIcon.VerticalLine);
                userType.AddEnumValue("Circle", global::Syncfusion.UI.Xaml.Charts.ChartLegendIcon.Circle);
                userType.AddEnumValue("Diamond", global::Syncfusion.UI.Xaml.Charts.ChartLegendIcon.Diamond);
                userType.AddEnumValue("Pentagon", global::Syncfusion.UI.Xaml.Charts.ChartLegendIcon.Pentagon);
                userType.AddEnumValue("Hexagon", global::Syncfusion.UI.Xaml.Charts.ChartLegendIcon.Hexagon);
                userType.AddEnumValue("Triangle", global::Syncfusion.UI.Xaml.Charts.ChartLegendIcon.Triangle);
                userType.AddEnumValue("InvertedTriangle", global::Syncfusion.UI.Xaml.Charts.ChartLegendIcon.InvertedTriangle);
                userType.AddEnumValue("Cross", global::Syncfusion.UI.Xaml.Charts.ChartLegendIcon.Cross);
                userType.AddEnumValue("Plus", global::Syncfusion.UI.Xaml.Charts.ChartLegendIcon.Plus);
                xamlType = userType;
                break;

            case 82:   //  Microsoft.UI.Xaml.Visibility
                xamlType = new global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 83:   //  Syncfusion.UI.Xaml.Charts.ChartColorModel
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 84:   //  Syncfusion.UI.Xaml.Charts.ChartBehaviorsCollection
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartBehavior>"));
                userType.CollectionAdd = VectorAdd_84_ChartBehaviorsCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 85:   //  System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartBehavior>
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartBehavior>"));
                userType.Activator = Activate_85_ObservableCollection;
                userType.CollectionAdd = VectorAdd_85_ObservableCollection;
                xamlType = userType;
                break;

            case 86:   //  System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartBehavior>
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_86_Collection;
                userType.CollectionAdd = VectorAdd_86_Collection;
                xamlType = userType;
                break;

            case 87:   //  Syncfusion.UI.Xaml.Charts.ChartBehavior
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.AddMemberName("AdorningCanvas");
                userType.AddMemberName("BottomAdorningCanvas");
                userType.AddMemberName("ChartArea");
                xamlType = userType;
                break;

            case 88:   //  Microsoft.UI.Xaml.Controls.Canvas
                xamlType = new global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 89:   //  Syncfusion.UI.Xaml.Charts.ChartAxisCollection
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartAxis>"));
                userType.CollectionAdd = VectorAdd_89_ChartAxisCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 90:   //  System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartAxis>
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartAxis>"));
                userType.Activator = Activate_90_ObservableCollection;
                userType.CollectionAdd = VectorAdd_90_ObservableCollection;
                xamlType = userType;
                break;

            case 91:   //  System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartAxis>
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_91_Collection;
                userType.CollectionAdd = VectorAdd_91_Collection;
                xamlType = userType;
                break;

            case 92:   //  Windows.Foundation.Rect
                xamlType = new global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 93:   //  Syncfusion.UI.Xaml.Charts.AxisElementPosition
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Inside", global::Syncfusion.UI.Xaml.Charts.AxisElementPosition.Inside);
                userType.AddEnumValue("Outside", global::Syncfusion.UI.Xaml.Charts.AxisElementPosition.Outside);
                xamlType = userType;
                break;

            case 94:   //  Syncfusion.UI.Xaml.Charts.AxisLabelIntersectAction
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Syncfusion.UI.Xaml.Charts.AxisLabelIntersectAction.None);
                userType.AddEnumValue("MultipleRows", global::Syncfusion.UI.Xaml.Charts.AxisLabelIntersectAction.MultipleRows);
                userType.AddEnumValue("Hide", global::Syncfusion.UI.Xaml.Charts.AxisLabelIntersectAction.Hide);
                userType.AddEnumValue("Auto", global::Syncfusion.UI.Xaml.Charts.AxisLabelIntersectAction.Auto);
                userType.AddEnumValue("Wrap", global::Syncfusion.UI.Xaml.Charts.AxisLabelIntersectAction.Wrap);
                xamlType = userType;
                break;

            case 95:   //  Syncfusion.UI.Xaml.Charts.LabelStyle
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 96:   //  System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartAxisLabel>
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartAxisLabel>"));
                userType.Activator = Activate_96_ObservableCollection;
                userType.CollectionAdd = VectorAdd_96_ObservableCollection;
                xamlType = userType;
                break;

            case 97:   //  System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartAxisLabel>
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_97_Collection;
                userType.CollectionAdd = VectorAdd_97_Collection;
                xamlType = userType;
                break;

            case 98:   //  Syncfusion.UI.Xaml.Charts.ChartAxisLabel
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_98_ChartAxisLabel;
                userType.AddMemberName("Content");
                userType.AddMemberName("Position");
                xamlType = userType;
                break;

            case 99:   //  Syncfusion.UI.Xaml.Charts.EdgeLabelsDrawingMode
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Center", global::Syncfusion.UI.Xaml.Charts.EdgeLabelsDrawingMode.Center);
                userType.AddEnumValue("Shift", global::Syncfusion.UI.Xaml.Charts.EdgeLabelsDrawingMode.Shift);
                userType.AddEnumValue("Fit", global::Syncfusion.UI.Xaml.Charts.EdgeLabelsDrawingMode.Fit);
                userType.AddEnumValue("Hide", global::Syncfusion.UI.Xaml.Charts.EdgeLabelsDrawingMode.Hide);
                xamlType = userType;
                break;

            case 100:   //  Syncfusion.UI.Xaml.Charts.EdgeLabelsVisibilityMode
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Default", global::Syncfusion.UI.Xaml.Charts.EdgeLabelsVisibilityMode.Default);
                userType.AddEnumValue("AlwaysVisible", global::Syncfusion.UI.Xaml.Charts.EdgeLabelsVisibilityMode.AlwaysVisible);
                userType.AddEnumValue("Visible", global::Syncfusion.UI.Xaml.Charts.EdgeLabelsVisibilityMode.Visible);
                xamlType = userType;
                break;

            case 101:   //  Syncfusion.UI.Xaml.Charts.ChartAxisLabelCollection
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartAxisLabel>"));
                userType.CollectionAdd = VectorAdd_101_ChartAxisLabelCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 102:   //  Microsoft.UI.Xaml.Thickness
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 103:   //  Syncfusion.UI.Xaml.Charts.ChartVisibleSeriesCollection
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartSeriesBase>"));
                userType.CollectionAdd = VectorAdd_103_ChartVisibleSeriesCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 104:   //  System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartSeriesBase>
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartSeriesBase>"));
                userType.Activator = Activate_104_ObservableCollection;
                userType.CollectionAdd = VectorAdd_104_ObservableCollection;
                xamlType = userType;
                break;

            case 105:   //  System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartSeriesBase>
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_105_Collection;
                userType.CollectionAdd = VectorAdd_105_Collection;
                xamlType = userType;
                break;

            case 106:   //  Microsoft.UI.Xaml.HorizontalAlignment
                xamlType = new global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 107:   //  Microsoft.UI.Xaml.VerticalAlignment
                xamlType = new global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 108:   //  Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBehavior"));
                userType.Activator = Activate_108_ChartZoomPanBehavior;
                userType.AddMemberName("EnablePinchZooming");
                userType.AddMemberName("ZoomMode");
                userType.AddMemberName("EnableSelectionZooming");
                userType.AddMemberName("ZoomRelativeToCursor");
                userType.AddMemberName("EnableDirectionalZooming");
                userType.AddMemberName("EnablePanning");
                userType.AddMemberName("StrokeThickness");
                userType.AddMemberName("MaximumZoomLevel");
                userType.AddMemberName("Stroke");
                userType.AddMemberName("Fill");
                userType.AddMemberName("EnableMouseWheelZooming");
                xamlType = userType;
                break;

            case 109:   //  Syncfusion.UI.Xaml.Charts.ZoomMode
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("X", global::Syncfusion.UI.Xaml.Charts.ZoomMode.X);
                userType.AddEnumValue("Y", global::Syncfusion.UI.Xaml.Charts.ZoomMode.Y);
                userType.AddEnumValue("XY", global::Syncfusion.UI.Xaml.Charts.ZoomMode.XY);
                xamlType = userType;
                break;

            case 110:   //  GUI.UserControls.ChartUC
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 111:   //  Syncfusion.UI.Xaml.Core.DoubleToObjectConverter
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_111_DoubleToObjectConverter;
                userType.AddMemberName("TrueValue");
                userType.AddMemberName("FalseValue");
                userType.AddMemberName("NullValue");
                userType.AddMemberName("GreaterThan");
                userType.AddMemberName("LessThan");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 112:   //  Syncfusion.UI.Xaml.Core.DoubleToVisibilityConverter
                userType = new global::GUI.GUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Core.DoubleToObjectConverter"));
                userType.Activator = Activate_112_DoubleToVisibilityConverter;
                userType.SetIsBindable();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Microsoft.UI.Xaml.XamlTypeInfo.XamlControlsXamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.Chart.WinUI.Syncfusion_Chart_WinUI_Net50_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.Core.WinUI.Syncfusion_Core_WinUI_Net50_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.Editors.WinUI.Syncfusion_Editors_WinUI_Net50_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_NavigationView_PaneDisplayMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneDisplayMode;
        }
        private void set_0_NavigationView_PaneDisplayMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneDisplayMode = (global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode)Value;
        }
        private object get_1_NavigationView_IsPaneToggleButtonVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsPaneToggleButtonVisible;
        }
        private void set_1_NavigationView_IsPaneToggleButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsPaneToggleButtonVisible = (global::System.Boolean)Value;
        }
        private object get_2_NavigationView_IsSettingsVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsSettingsVisible;
        }
        private void set_2_NavigationView_IsSettingsVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsSettingsVisible = (global::System.Boolean)Value;
        }
        private object get_3_NavigationView_IsBackButtonVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsBackButtonVisible;
        }
        private void set_3_NavigationView_IsBackButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsBackButtonVisible = (global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible)Value;
        }
        private object get_4_NavigationView_CompactPaneLength(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.CompactPaneLength;
        }
        private void set_4_NavigationView_CompactPaneLength(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.CompactPaneLength = (global::System.Double)Value;
        }
        private object get_5_NavigationView_MenuItems(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItems;
        }
        private object get_6_NavigationView_AlwaysShowHeader(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.AlwaysShowHeader;
        }
        private void set_6_NavigationView_AlwaysShowHeader(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.AlwaysShowHeader = (global::System.Boolean)Value;
        }
        private object get_7_NavigationView_AutoSuggestBox(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.AutoSuggestBox;
        }
        private void set_7_NavigationView_AutoSuggestBox(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.AutoSuggestBox = (global::Microsoft.UI.Xaml.Controls.AutoSuggestBox)Value;
        }
        private object get_8_NavigationView_CompactModeThresholdWidth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.CompactModeThresholdWidth;
        }
        private void set_8_NavigationView_CompactModeThresholdWidth(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.CompactModeThresholdWidth = (global::System.Double)Value;
        }
        private object get_9_NavigationView_ContentOverlay(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.ContentOverlay;
        }
        private void set_9_NavigationView_ContentOverlay(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.ContentOverlay = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_10_NavigationView_DisplayMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.DisplayMode;
        }
        private object get_11_NavigationView_ExpandedModeThresholdWidth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.ExpandedModeThresholdWidth;
        }
        private void set_11_NavigationView_ExpandedModeThresholdWidth(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.ExpandedModeThresholdWidth = (global::System.Double)Value;
        }
        private object get_12_NavigationView_FooterMenuItems(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.FooterMenuItems;
        }
        private object get_13_NavigationView_FooterMenuItemsSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.FooterMenuItemsSource;
        }
        private void set_13_NavigationView_FooterMenuItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.FooterMenuItemsSource = (global::System.Object)Value;
        }
        private object get_14_NavigationView_Header(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.Header;
        }
        private void set_14_NavigationView_Header(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_15_NavigationView_HeaderTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.HeaderTemplate;
        }
        private void set_15_NavigationView_HeaderTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.HeaderTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_16_NavigationView_IsBackEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsBackEnabled;
        }
        private void set_16_NavigationView_IsBackEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsBackEnabled = (global::System.Boolean)Value;
        }
        private object get_17_NavigationView_IsPaneOpen(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsPaneOpen;
        }
        private void set_17_NavigationView_IsPaneOpen(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsPaneOpen = (global::System.Boolean)Value;
        }
        private object get_18_NavigationView_IsPaneVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsPaneVisible;
        }
        private void set_18_NavigationView_IsPaneVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsPaneVisible = (global::System.Boolean)Value;
        }
        private object get_19_NavigationView_IsTitleBarAutoPaddingEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsTitleBarAutoPaddingEnabled;
        }
        private void set_19_NavigationView_IsTitleBarAutoPaddingEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsTitleBarAutoPaddingEnabled = (global::System.Boolean)Value;
        }
        private object get_20_NavigationView_MenuItemContainerStyle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemContainerStyle;
        }
        private void set_20_NavigationView_MenuItemContainerStyle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemContainerStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_21_NavigationView_MenuItemContainerStyleSelector(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemContainerStyleSelector;
        }
        private void set_21_NavigationView_MenuItemContainerStyleSelector(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemContainerStyleSelector = (global::Microsoft.UI.Xaml.Controls.StyleSelector)Value;
        }
        private object get_22_NavigationView_MenuItemTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemTemplate;
        }
        private void set_22_NavigationView_MenuItemTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_23_NavigationView_MenuItemTemplateSelector(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemTemplateSelector;
        }
        private void set_23_NavigationView_MenuItemTemplateSelector(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemTemplateSelector = (global::Microsoft.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_24_NavigationView_MenuItemsSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemsSource;
        }
        private void set_24_NavigationView_MenuItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemsSource = (global::System.Object)Value;
        }
        private object get_25_NavigationView_OpenPaneLength(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.OpenPaneLength;
        }
        private void set_25_NavigationView_OpenPaneLength(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.OpenPaneLength = (global::System.Double)Value;
        }
        private object get_26_NavigationView_OverflowLabelMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.OverflowLabelMode;
        }
        private void set_26_NavigationView_OverflowLabelMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.OverflowLabelMode = (global::Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode)Value;
        }
        private object get_27_NavigationView_PaneCustomContent(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneCustomContent;
        }
        private void set_27_NavigationView_PaneCustomContent(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneCustomContent = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_28_NavigationView_PaneFooter(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneFooter;
        }
        private void set_28_NavigationView_PaneFooter(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneFooter = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_29_NavigationView_PaneHeader(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneHeader;
        }
        private void set_29_NavigationView_PaneHeader(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneHeader = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_30_NavigationView_PaneTitle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneTitle;
        }
        private void set_30_NavigationView_PaneTitle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneTitle = (global::System.String)Value;
        }
        private object get_31_NavigationView_PaneToggleButtonStyle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneToggleButtonStyle;
        }
        private void set_31_NavigationView_PaneToggleButtonStyle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneToggleButtonStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_32_NavigationView_SelectedItem(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.SelectedItem;
        }
        private void set_32_NavigationView_SelectedItem(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.SelectedItem = (global::System.Object)Value;
        }
        private object get_33_NavigationView_SelectionFollowsFocus(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.SelectionFollowsFocus;
        }
        private void set_33_NavigationView_SelectionFollowsFocus(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.SelectionFollowsFocus = (global::Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus)Value;
        }
        private object get_34_NavigationView_SettingsItem(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.SettingsItem;
        }
        private object get_35_NavigationView_ShoulderNavigationEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.ShoulderNavigationEnabled;
        }
        private void set_35_NavigationView_ShoulderNavigationEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.ShoulderNavigationEnabled = (global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled)Value;
        }
        private object get_36_NavigationView_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.TemplateSettings;
        }
        private object get_37_NavigationViewItem_Icon(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.Icon;
        }
        private void set_37_NavigationViewItem_Icon(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.Icon = (global::Microsoft.UI.Xaml.Controls.IconElement)Value;
        }
        private object get_38_NavigationViewItem_CompactPaneLength(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.CompactPaneLength;
        }
        private object get_39_NavigationViewItem_HasUnrealizedChildren(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.HasUnrealizedChildren;
        }
        private void set_39_NavigationViewItem_HasUnrealizedChildren(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.HasUnrealizedChildren = (global::System.Boolean)Value;
        }
        private object get_40_NavigationViewItem_IsChildSelected(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.IsChildSelected;
        }
        private void set_40_NavigationViewItem_IsChildSelected(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.IsChildSelected = (global::System.Boolean)Value;
        }
        private object get_41_NavigationViewItem_IsExpanded(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.IsExpanded;
        }
        private void set_41_NavigationViewItem_IsExpanded(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_42_NavigationViewItem_MenuItems(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.MenuItems;
        }
        private object get_43_NavigationViewItem_MenuItemsSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.MenuItemsSource;
        }
        private void set_43_NavigationViewItem_MenuItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.MenuItemsSource = (global::System.Object)Value;
        }
        private object get_44_NavigationViewItem_SelectsOnInvoked(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.SelectsOnInvoked;
        }
        private void set_44_NavigationViewItem_SelectsOnInvoked(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.SelectsOnInvoked = (global::System.Boolean)Value;
        }
        private object get_45_NavigationViewItemBase_IsSelected(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItemBase)instance;
            return that.IsSelected;
        }
        private void set_45_NavigationViewItemBase_IsSelected(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItemBase)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_46_NumberBox_Value(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.Value;
        }
        private void set_46_NumberBox_Value(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.Value = (global::System.Double)Value;
        }
        private object get_47_NumberBox_SpinButtonPlacementMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.SpinButtonPlacementMode;
        }
        private void set_47_NumberBox_SpinButtonPlacementMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.SpinButtonPlacementMode = (global::Microsoft.UI.Xaml.Controls.NumberBoxSpinButtonPlacementMode)Value;
        }
        private object get_48_NumberBox_SmallChange(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.SmallChange;
        }
        private void set_48_NumberBox_SmallChange(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.SmallChange = (global::System.Double)Value;
        }
        private object get_49_NumberBox_AcceptsExpression(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.AcceptsExpression;
        }
        private void set_49_NumberBox_AcceptsExpression(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.AcceptsExpression = (global::System.Boolean)Value;
        }
        private object get_50_NumberBox_Description(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.Description;
        }
        private void set_50_NumberBox_Description(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.Description = (global::System.Object)Value;
        }
        private object get_51_NumberBox_Header(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.Header;
        }
        private void set_51_NumberBox_Header(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_52_NumberBox_HeaderTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.HeaderTemplate;
        }
        private void set_52_NumberBox_HeaderTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.HeaderTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_53_NumberBox_IsWrapEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.IsWrapEnabled;
        }
        private void set_53_NumberBox_IsWrapEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.IsWrapEnabled = (global::System.Boolean)Value;
        }
        private object get_54_NumberBox_LargeChange(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.LargeChange;
        }
        private void set_54_NumberBox_LargeChange(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.LargeChange = (global::System.Double)Value;
        }
        private object get_55_NumberBox_Maximum(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.Maximum;
        }
        private void set_55_NumberBox_Maximum(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.Maximum = (global::System.Double)Value;
        }
        private object get_56_NumberBox_Minimum(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.Minimum;
        }
        private void set_56_NumberBox_Minimum(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.Minimum = (global::System.Double)Value;
        }
        private object get_57_NumberBox_NumberFormatter(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.NumberFormatter;
        }
        private void set_57_NumberBox_NumberFormatter(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.NumberFormatter = (global::Windows.Globalization.NumberFormatting.INumberFormatter2)Value;
        }
        private object get_58_NumberBox_PlaceholderText(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.PlaceholderText;
        }
        private void set_58_NumberBox_PlaceholderText(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.PlaceholderText = (global::System.String)Value;
        }
        private object get_59_NumberBox_PreventKeyboardDisplayOnProgrammaticFocus(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.PreventKeyboardDisplayOnProgrammaticFocus;
        }
        private void set_59_NumberBox_PreventKeyboardDisplayOnProgrammaticFocus(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.PreventKeyboardDisplayOnProgrammaticFocus = (global::System.Boolean)Value;
        }
        private object get_60_NumberBox_SelectionFlyout(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.SelectionFlyout;
        }
        private void set_60_NumberBox_SelectionFlyout(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.SelectionFlyout = (global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase)Value;
        }
        private object get_61_NumberBox_SelectionHighlightColor(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.SelectionHighlightColor;
        }
        private void set_61_NumberBox_SelectionHighlightColor(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.SelectionHighlightColor = (global::Microsoft.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_62_NumberBox_Text(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.Text;
        }
        private void set_62_NumberBox_Text(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_63_NumberBox_TextReadingOrder(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.TextReadingOrder;
        }
        private void set_63_NumberBox_TextReadingOrder(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.TextReadingOrder = (global::Microsoft.UI.Xaml.TextReadingOrder)Value;
        }
        private object get_64_NumberBox_ValidationMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.ValidationMode;
        }
        private void set_64_NumberBox_ValidationMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.ValidationMode = (global::Microsoft.UI.Xaml.Controls.NumberBoxValidationMode)Value;
        }
        private object get_65_SfDropDownBase_Content(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfDropDownBase)instance;
            return that.Content;
        }
        private void set_65_SfDropDownBase_Content(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfDropDownBase)instance;
            that.Content = (global::System.Object)Value;
        }
        private object get_66_SfTimePicker_DisplayTimeFormat(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            return that.DisplayTimeFormat;
        }
        private void set_66_SfTimePicker_DisplayTimeFormat(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            that.DisplayTimeFormat = (global::System.String)Value;
        }
        private object get_67_SfTimePicker_SelectedTime(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            return that.SelectedTime;
        }
        private void set_67_SfTimePicker_SelectedTime(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            that.SelectedTime = (global::System.Nullable<global::System.DateTimeOffset>)Value;
        }
        private object get_68_SfTimePicker_MinTime(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            return that.MinTime;
        }
        private void set_68_SfTimePicker_MinTime(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            that.MinTime = (global::System.DateTimeOffset)Value;
        }
        private object get_69_SfTimePicker_MaxTime(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            return that.MaxTime;
        }
        private void set_69_SfTimePicker_MaxTime(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            that.MaxTime = (global::System.DateTimeOffset)Value;
        }
        private object get_70_SfTimePicker_VisibleItemsCount(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            return that.VisibleItemsCount;
        }
        private void set_70_SfTimePicker_VisibleItemsCount(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            that.VisibleItemsCount = (global::System.Int32)Value;
        }
        private object get_71_SfTimePicker_ShowColumnHeaders(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            return that.ShowColumnHeaders;
        }
        private void set_71_SfTimePicker_ShowColumnHeaders(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            that.ShowColumnHeaders = (global::System.Boolean)Value;
        }
        private object get_72_SfTimePicker_ItemWidth(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            return that.ItemWidth;
        }
        private void set_72_SfTimePicker_ItemWidth(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            that.ItemWidth = (global::System.Double)Value;
        }
        private object get_73_SfTimePicker_MinItemWidth(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            return that.MinItemWidth;
        }
        private void set_73_SfTimePicker_MinItemWidth(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            that.MinItemWidth = (global::System.Double)Value;
        }
        private object get_74_SfTimePicker_MaxItemWidth(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            return that.MaxItemWidth;
        }
        private void set_74_SfTimePicker_MaxItemWidth(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            that.MaxItemWidth = (global::System.Double)Value;
        }
        private object get_75_SfTimePicker_ItemHeight(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            return that.ItemHeight;
        }
        private void set_75_SfTimePicker_ItemHeight(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            that.ItemHeight = (global::System.Double)Value;
        }
        private object get_76_SfTimePicker_DropDownHeaderTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            return that.DropDownHeaderTemplate;
        }
        private void set_76_SfTimePicker_DropDownHeaderTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            that.DropDownHeaderTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_77_SfTimePicker_DropDownHeader(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            return that.DropDownHeader;
        }
        private void set_77_SfTimePicker_DropDownHeader(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            that.DropDownHeader = (global::System.Object)Value;
        }
        private object get_78_SfTimePicker_ShowDropDownHeader(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            return that.ShowDropDownHeader;
        }
        private void set_78_SfTimePicker_ShowDropDownHeader(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            that.ShowDropDownHeader = (global::System.Boolean)Value;
        }
        private object get_79_SfTimePicker_PlaceholderText(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            return that.PlaceholderText;
        }
        private void set_79_SfTimePicker_PlaceholderText(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            that.PlaceholderText = (global::System.String)Value;
        }
        private object get_80_SfTimePicker_ItemTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            return that.ItemTemplate;
        }
        private void set_80_SfTimePicker_ItemTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            that.ItemTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_81_SfTimePicker_ItemContainerStyle(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            return that.ItemContainerStyle;
        }
        private void set_81_SfTimePicker_ItemContainerStyle(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            that.ItemContainerStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_82_SfTimePicker_ItemTemplateSelector(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            return that.ItemTemplateSelector;
        }
        private void set_82_SfTimePicker_ItemTemplateSelector(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            that.ItemTemplateSelector = (global::Microsoft.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_83_SfTimePicker_BlackoutTimes(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            return that.BlackoutTimes;
        }
        private void set_83_SfTimePicker_BlackoutTimes(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            that.BlackoutTimes = (global::Syncfusion.UI.Xaml.Editors.DateTimeOffsetCollection)Value;
        }
        private object get_84_DateTimeOffset_Date(object instance)
        {
            var that = (global::System.DateTimeOffset)instance;
            return that.Date;
        }
        private object get_85_DateTimeOffset_DateTime(object instance)
        {
            var that = (global::System.DateTimeOffset)instance;
            return that.DateTime;
        }
        private object get_86_DateTimeOffset_Day(object instance)
        {
            var that = (global::System.DateTimeOffset)instance;
            return that.Day;
        }
        private object get_87_DateTimeOffset_DayOfWeek(object instance)
        {
            var that = (global::System.DateTimeOffset)instance;
            return that.DayOfWeek;
        }
        private object get_88_DateTimeOffset_DayOfYear(object instance)
        {
            var that = (global::System.DateTimeOffset)instance;
            return that.DayOfYear;
        }
        private object get_89_DateTimeOffset_Hour(object instance)
        {
            var that = (global::System.DateTimeOffset)instance;
            return that.Hour;
        }
        private object get_90_DateTimeOffset_LocalDateTime(object instance)
        {
            var that = (global::System.DateTimeOffset)instance;
            return that.LocalDateTime;
        }
        private object get_91_DateTimeOffset_Millisecond(object instance)
        {
            var that = (global::System.DateTimeOffset)instance;
            return that.Millisecond;
        }
        private object get_92_DateTimeOffset_Minute(object instance)
        {
            var that = (global::System.DateTimeOffset)instance;
            return that.Minute;
        }
        private object get_93_DateTimeOffset_Month(object instance)
        {
            var that = (global::System.DateTimeOffset)instance;
            return that.Month;
        }
        private object get_94_DateTimeOffset_Offset(object instance)
        {
            var that = (global::System.DateTimeOffset)instance;
            return that.Offset;
        }
        private object get_95_DateTimeOffset_Second(object instance)
        {
            var that = (global::System.DateTimeOffset)instance;
            return that.Second;
        }
        private object get_96_DateTimeOffset_Ticks(object instance)
        {
            var that = (global::System.DateTimeOffset)instance;
            return that.Ticks;
        }
        private object get_97_DateTimeOffset_TimeOfDay(object instance)
        {
            var that = (global::System.DateTimeOffset)instance;
            return that.TimeOfDay;
        }
        private object get_98_DateTimeOffset_UtcDateTime(object instance)
        {
            var that = (global::System.DateTimeOffset)instance;
            return that.UtcDateTime;
        }
        private object get_99_DateTimeOffset_UtcTicks(object instance)
        {
            var that = (global::System.DateTimeOffset)instance;
            return that.UtcTicks;
        }
        private object get_100_DateTimeOffset_Year(object instance)
        {
            var that = (global::System.DateTimeOffset)instance;
            return that.Year;
        }
        private object get_101_SfTimePicker_ClockIdentifier(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            return that.ClockIdentifier;
        }
        private void set_101_SfTimePicker_ClockIdentifier(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfTimePicker)instance;
            that.ClockIdentifier = (global::System.String)Value;
        }
        private object get_102_DateTimePickerBase_AllowNull(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.DateTimePickerBase)instance;
            return that.AllowNull;
        }
        private void set_102_DateTimePickerBase_AllowNull(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.DateTimePickerBase)instance;
            that.AllowNull = (global::System.Boolean)Value;
        }
        private object get_103_DateTimePickerBase_EditMode(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.DateTimePickerBase)instance;
            return that.EditMode;
        }
        private void set_103_DateTimePickerBase_EditMode(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.DateTimePickerBase)instance;
            that.EditMode = (global::Syncfusion.UI.Xaml.Editors.DateTimeEditMode)Value;
        }
        private object get_104_DateTimePickerBase_ShowClearButton(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.DateTimePickerBase)instance;
            return that.ShowClearButton;
        }
        private void set_104_DateTimePickerBase_ShowClearButton(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.DateTimePickerBase)instance;
            that.ShowClearButton = (global::System.Boolean)Value;
        }
        private object get_105_DateTimePickerBase_Header(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.DateTimePickerBase)instance;
            return that.Header;
        }
        private void set_105_DateTimePickerBase_Header(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.DateTimePickerBase)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_106_DateTimePickerBase_HeaderTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.DateTimePickerBase)instance;
            return that.HeaderTemplate;
        }
        private void set_106_DateTimePickerBase_HeaderTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.DateTimePickerBase)instance;
            that.HeaderTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_107_DateTimePickerBase_Description(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.DateTimePickerBase)instance;
            return that.Description;
        }
        private void set_107_DateTimePickerBase_Description(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.DateTimePickerBase)instance;
            that.Description = (global::System.Object)Value;
        }
        private object get_108_SfDropDownBase_ContentTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfDropDownBase)instance;
            return that.ContentTemplate;
        }
        private void set_108_SfDropDownBase_ContentTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfDropDownBase)instance;
            that.ContentTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_109_SfDropDownBase_DropDownButtonTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfDropDownBase)instance;
            return that.DropDownButtonTemplate;
        }
        private void set_109_SfDropDownBase_DropDownButtonTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfDropDownBase)instance;
            that.DropDownButtonTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_110_SfDropDownBase_DropDownHeight(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfDropDownBase)instance;
            return that.DropDownHeight;
        }
        private void set_110_SfDropDownBase_DropDownHeight(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfDropDownBase)instance;
            that.DropDownHeight = (global::System.Double)Value;
        }
        private object get_111_SfDropDownBase_DropDownMode(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfDropDownBase)instance;
            return that.DropDownMode;
        }
        private void set_111_SfDropDownBase_DropDownMode(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfDropDownBase)instance;
            that.DropDownMode = (global::Syncfusion.UI.Xaml.Editors.DropDownMode)Value;
        }
        private object get_112_SfDropDownBase_DropDownPlacement(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfDropDownBase)instance;
            return that.DropDownPlacement;
        }
        private void set_112_SfDropDownBase_DropDownPlacement(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfDropDownBase)instance;
            that.DropDownPlacement = (global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutPlacementMode)Value;
        }
        private object get_113_SfDropDownBase_IsOpen(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfDropDownBase)instance;
            return that.IsOpen;
        }
        private void set_113_SfDropDownBase_IsOpen(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfDropDownBase)instance;
            that.IsOpen = (global::System.Boolean)Value;
        }
        private object get_114_SfDropDownBase_ShowDropDownButton(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfDropDownBase)instance;
            return that.ShowDropDownButton;
        }
        private void set_114_SfDropDownBase_ShowDropDownButton(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfDropDownBase)instance;
            that.ShowDropDownButton = (global::System.Boolean)Value;
        }
        private object get_115_SfDropDownBase_ShowSubmitButtons(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfDropDownBase)instance;
            return that.ShowSubmitButtons;
        }
        private void set_115_SfDropDownBase_ShowSubmitButtons(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Editors.SfDropDownBase)instance;
            that.ShowSubmitButtons = (global::System.Boolean)Value;
        }
        private object get_116_SfCartesianChart_Series(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfCartesianChart)instance;
            return that.Series;
        }
        private void set_116_SfCartesianChart_Series(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfCartesianChart)instance;
            that.Series = (global::Syncfusion.UI.Xaml.Charts.CartesianSeriesCollection)Value;
        }
        private object get_117_CartesianSeries_DataLabelSettings(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.CartesianSeries)instance;
            return that.DataLabelSettings;
        }
        private void set_117_CartesianSeries_DataLabelSettings(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.CartesianSeries)instance;
            that.DataLabelSettings = (global::Syncfusion.UI.Xaml.Charts.CartesianDataLabelSettings)Value;
        }
        private object get_118_CartesianSeries_XRange(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.CartesianSeries)instance;
            return that.XRange;
        }
        private object get_119_CartesianSeries_YRange(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.CartesianSeries)instance;
            return that.YRange;
        }
        private object get_120_CartesianSeries_XAxis(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.CartesianSeries)instance;
            return that.XAxis;
        }
        private void set_120_CartesianSeries_XAxis(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.CartesianSeries)instance;
            that.XAxis = (global::Syncfusion.UI.Xaml.Charts.ChartAxisBase2D)Value;
        }
        private object get_121_CartesianSeries_YAxis(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.CartesianSeries)instance;
            return that.YAxis;
        }
        private void set_121_CartesianSeries_YAxis(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.CartesianSeries)instance;
            that.YAxis = (global::Syncfusion.UI.Xaml.Charts.RangeAxisBase)Value;
        }
        private object get_122_CartesianSeries_IsTransposed(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.CartesianSeries)instance;
            return that.IsTransposed;
        }
        private void set_122_CartesianSeries_IsTransposed(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.CartesianSeries)instance;
            that.IsTransposed = (global::System.Boolean)Value;
        }
        private object get_123_CartesianSeries_ShowTrackballInfo(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.CartesianSeries)instance;
            return that.ShowTrackballInfo;
        }
        private void set_123_CartesianSeries_ShowTrackballInfo(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.CartesianSeries)instance;
            that.ShowTrackballInfo = (global::System.Boolean)Value;
        }
        private object get_124_DataMarkerSeries_ShowDataLabels(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.DataMarkerSeries)instance;
            return that.ShowDataLabels;
        }
        private void set_124_DataMarkerSeries_ShowDataLabels(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.DataMarkerSeries)instance;
            that.ShowDataLabels = (global::System.Boolean)Value;
        }
        private object get_125_ChartSeries_StrokeThickness(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeries)instance;
            return that.StrokeThickness;
        }
        private void set_125_ChartSeries_StrokeThickness(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeries)instance;
            that.StrokeThickness = (global::System.Double)Value;
        }
        private object get_126_ChartSeries_Area(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeries)instance;
            return that.Area;
        }
        private object get_127_ChartSeries_Stroke(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeries)instance;
            return that.Stroke;
        }
        private void set_127_ChartSeries_Stroke(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeries)instance;
            that.Stroke = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_128_ChartSeriesBase_DataCount(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.DataCount;
        }
        private object get_129_ChartSeriesBase_TooltipTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.TooltipTemplate;
        }
        private void set_129_ChartSeriesBase_TooltipTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.TooltipTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_130_ChartSeriesBase_ShowTooltip(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.ShowTooltip;
        }
        private void set_130_ChartSeriesBase_ShowTooltip(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.ShowTooltip = (global::System.Boolean)Value;
        }
        private object get_131_ChartSeriesBase_ListenPropertyChange(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.ListenPropertyChange;
        }
        private void set_131_ChartSeriesBase_ListenPropertyChange(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.ListenPropertyChange = (global::System.Boolean)Value;
        }
        private object get_132_ChartSeriesBase_IsSeriesVisible(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.IsSeriesVisible;
        }
        private void set_132_ChartSeriesBase_IsSeriesVisible(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.IsSeriesVisible = (global::System.Boolean)Value;
        }
        private object get_133_ChartSeriesBase_Palette(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.Palette;
        }
        private void set_133_ChartSeriesBase_Palette(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.Palette = (global::Syncfusion.UI.Xaml.Charts.ChartColorPalette)Value;
        }
        private object get_134_ChartSeriesBase_ItemsSource(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.ItemsSource;
        }
        private void set_134_ChartSeriesBase_ItemsSource(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.ItemsSource = (global::System.Object)Value;
        }
        private object get_135_ChartSeriesBase_TrackballLabelTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.TrackballLabelTemplate;
        }
        private void set_135_ChartSeriesBase_TrackballLabelTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.TrackballLabelTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_136_ChartSeriesBase_Interior(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.Interior;
        }
        private void set_136_ChartSeriesBase_Interior(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.Interior = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_137_ChartSeriesBase_Label(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.Label;
        }
        private void set_137_ChartSeriesBase_Label(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.Label = (global::System.String)Value;
        }
        private object get_138_ChartSeriesBase_LegendIcon(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.LegendIcon;
        }
        private void set_138_ChartSeriesBase_LegendIcon(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.LegendIcon = (global::Syncfusion.UI.Xaml.Charts.ChartLegendIcon)Value;
        }
        private object get_139_ChartSeriesBase_LegendIconTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.LegendIconTemplate;
        }
        private void set_139_ChartSeriesBase_LegendIconTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.LegendIconTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_140_ChartSeriesBase_VisibilityOnLegend(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.VisibilityOnLegend;
        }
        private void set_140_ChartSeriesBase_VisibilityOnLegend(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.VisibilityOnLegend = (global::Microsoft.UI.Xaml.Visibility)Value;
        }
        private object get_141_ChartSeriesBase_ColorModel(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.ColorModel;
        }
        private void set_141_ChartSeriesBase_ColorModel(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.ColorModel = (global::Syncfusion.UI.Xaml.Charts.ChartColorModel)Value;
        }
        private object get_142_ChartSeriesBase_XBindingPath(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.XBindingPath;
        }
        private void set_142_ChartSeriesBase_XBindingPath(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.XBindingPath = (global::System.String)Value;
        }
        private object get_143_ChartSeriesBase_SegmentColorPath(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.SegmentColorPath;
        }
        private void set_143_ChartSeriesBase_SegmentColorPath(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.SegmentColorPath = (global::System.String)Value;
        }
        private object get_144_ChartSeriesBase_EnableAnimation(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.EnableAnimation;
        }
        private void set_144_ChartSeriesBase_EnableAnimation(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.EnableAnimation = (global::System.Boolean)Value;
        }
        private object get_145_ChartSeriesBase_AnimationDuration(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.AnimationDuration;
        }
        private void set_145_ChartSeriesBase_AnimationDuration(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.AnimationDuration = (global::System.TimeSpan)Value;
        }
        private object get_146_SfCartesianChart_PrimaryAxis(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfCartesianChart)instance;
            return that.PrimaryAxis;
        }
        private void set_146_SfCartesianChart_PrimaryAxis(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfCartesianChart)instance;
            that.PrimaryAxis = (global::Syncfusion.UI.Xaml.Charts.ChartAxisBase2D)Value;
        }
        private object get_147_ChartBase_Behaviors(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            return that.Behaviors;
        }
        private void set_147_ChartBase_Behaviors(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            that.Behaviors = (global::Syncfusion.UI.Xaml.Charts.ChartBehaviorsCollection)Value;
        }
        private object get_148_ChartBehavior_AdorningCanvas(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBehavior)instance;
            return that.AdorningCanvas;
        }
        private object get_149_ChartBehavior_BottomAdorningCanvas(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBehavior)instance;
            return that.BottomAdorningCanvas;
        }
        private object get_150_ChartBehavior_ChartArea(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBehavior)instance;
            return that.ChartArea;
        }
        private object get_151_SfCartesianChart_Axes(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfCartesianChart)instance;
            return that.Axes;
        }
        private object get_152_ChartAxis_IsLogarithmic(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.IsLogarithmic;
        }
        private object get_153_ChartAxis_ActualPlotOffset(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.ActualPlotOffset;
        }
        private object get_154_ChartAxis_MaximumLabels(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.MaximumLabels;
        }
        private void set_154_ChartAxis_MaximumLabels(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.MaximumLabels = (global::System.Int32)Value;
        }
        private object get_155_ChartAxis_VisibleRange(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.VisibleRange;
        }
        private object get_156_ChartAxis_ArrangeRect(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.ArrangeRect;
        }
        private object get_157_ChartAxis_ContentPath(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.ContentPath;
        }
        private void set_157_ChartAxis_ContentPath(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.ContentPath = (global::System.String)Value;
        }
        private object get_158_ChartAxis_LabelFormat(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.LabelFormat;
        }
        private void set_158_ChartAxis_LabelFormat(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.LabelFormat = (global::System.String)Value;
        }
        private object get_159_ChartAxis_PlotOffset(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.PlotOffset;
        }
        private void set_159_ChartAxis_PlotOffset(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.PlotOffset = (global::System.Double)Value;
        }
        private object get_160_ChartAxis_PlotOffsetStart(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.PlotOffsetStart;
        }
        private void set_160_ChartAxis_PlotOffsetStart(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.PlotOffsetStart = (global::System.Double)Value;
        }
        private object get_161_ChartAxis_PlotOffsetEnd(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.PlotOffsetEnd;
        }
        private void set_161_ChartAxis_PlotOffsetEnd(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.PlotOffsetEnd = (global::System.Double)Value;
        }
        private object get_162_ChartAxis_AxisLineOffset(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.AxisLineOffset;
        }
        private void set_162_ChartAxis_AxisLineOffset(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.AxisLineOffset = (global::System.Double)Value;
        }
        private object get_163_ChartAxis_LabelPosition(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.LabelPosition;
        }
        private void set_163_ChartAxis_LabelPosition(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.LabelPosition = (global::Syncfusion.UI.Xaml.Charts.AxisElementPosition)Value;
        }
        private object get_164_ChartAxis_LabelSource(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.LabelSource;
        }
        private void set_164_ChartAxis_LabelSource(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.LabelSource = (global::System.Object)Value;
        }
        private object get_165_ChartAxis_LabelIntersectAction(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.LabelIntersectAction;
        }
        private void set_165_ChartAxis_LabelIntersectAction(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.LabelIntersectAction = (global::Syncfusion.UI.Xaml.Charts.AxisLabelIntersectAction)Value;
        }
        private object get_166_ChartAxis_LabelExtent(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.LabelExtent;
        }
        private void set_166_ChartAxis_LabelExtent(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.LabelExtent = (global::System.Double)Value;
        }
        private object get_167_ChartAxis_LabelRotationAngle(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.LabelRotationAngle;
        }
        private void set_167_ChartAxis_LabelRotationAngle(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.LabelRotationAngle = (global::System.Double)Value;
        }
        private object get_168_ChartAxis_AxisLineStyle(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.AxisLineStyle;
        }
        private void set_168_ChartAxis_AxisLineStyle(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.AxisLineStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_169_ChartAxis_OpposedPosition(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.OpposedPosition;
        }
        private void set_169_ChartAxis_OpposedPosition(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.OpposedPosition = (global::System.Boolean)Value;
        }
        private object get_170_ChartAxis_DesiredIntervalsCount(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.DesiredIntervalsCount;
        }
        private void set_170_ChartAxis_DesiredIntervalsCount(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.DesiredIntervalsCount = (global::System.Object)Value;
        }
        private object get_171_ChartAxis_Header(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.Header;
        }
        private void set_171_ChartAxis_Header(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_172_ChartAxis_HeaderStyle(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.HeaderStyle;
        }
        private void set_172_ChartAxis_HeaderStyle(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.HeaderStyle = (global::Syncfusion.UI.Xaml.Charts.LabelStyle)Value;
        }
        private object get_173_ChartAxis_HeaderTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.HeaderTemplate;
        }
        private void set_173_ChartAxis_HeaderTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.HeaderTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_174_ChartAxis_TickLineSize(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.TickLineSize;
        }
        private void set_174_ChartAxis_TickLineSize(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.TickLineSize = (global::System.Double)Value;
        }
        private object get_175_ChartAxis_VisibleLabels(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.VisibleLabels;
        }
        private object get_176_ChartAxisLabel_Content(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel)instance;
            return that.Content;
        }
        private void set_176_ChartAxisLabel_Content(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel)instance;
            that.Content = (global::System.Object)Value;
        }
        private object get_177_ChartAxisLabel_Position(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel)instance;
            return that.Position;
        }
        private void set_177_ChartAxisLabel_Position(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel)instance;
            that.Position = (global::System.Double)Value;
        }
        private object get_178_ChartAxis_IsInversed(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.IsInversed;
        }
        private void set_178_ChartAxis_IsInversed(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.IsInversed = (global::System.Boolean)Value;
        }
        private object get_179_ChartAxis_TickLinesPosition(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.TickLinesPosition;
        }
        private void set_179_ChartAxis_TickLinesPosition(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.TickLinesPosition = (global::Syncfusion.UI.Xaml.Charts.AxisElementPosition)Value;
        }
        private object get_180_ChartAxis_EdgeLabelsDrawingMode(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.EdgeLabelsDrawingMode;
        }
        private void set_180_ChartAxis_EdgeLabelsDrawingMode(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.EdgeLabelsDrawingMode = (global::Syncfusion.UI.Xaml.Charts.EdgeLabelsDrawingMode)Value;
        }
        private object get_181_ChartAxis_EdgeLabelsVisibilityMode(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.EdgeLabelsVisibilityMode;
        }
        private void set_181_ChartAxis_EdgeLabelsVisibilityMode(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.EdgeLabelsVisibilityMode = (global::Syncfusion.UI.Xaml.Charts.EdgeLabelsVisibilityMode)Value;
        }
        private object get_182_ChartAxis_MajorGridLineStyle(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.MajorGridLineStyle;
        }
        private void set_182_ChartAxis_MajorGridLineStyle(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.MajorGridLineStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_183_ChartAxis_MinorGridLineStyle(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.MinorGridLineStyle;
        }
        private void set_183_ChartAxis_MinorGridLineStyle(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.MinorGridLineStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_184_ChartAxis_MajorTickLineStyle(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.MajorTickLineStyle;
        }
        private void set_184_ChartAxis_MajorTickLineStyle(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.MajorTickLineStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_185_ChartAxis_MinorTickLineStyle(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.MinorTickLineStyle;
        }
        private void set_185_ChartAxis_MinorTickLineStyle(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.MinorTickLineStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_186_ChartAxis_ShowTrackballInfo(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.ShowTrackballInfo;
        }
        private void set_186_ChartAxis_ShowTrackballInfo(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.ShowTrackballInfo = (global::System.Boolean)Value;
        }
        private object get_187_ChartAxis_TrackballLabelTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.TrackballLabelTemplate;
        }
        private void set_187_ChartAxis_TrackballLabelTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.TrackballLabelTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_188_ChartAxis_CrosshairLabelTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.CrosshairLabelTemplate;
        }
        private void set_188_ChartAxis_CrosshairLabelTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.CrosshairLabelTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_189_ChartAxis_ShowGridLines(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.ShowGridLines;
        }
        private void set_189_ChartAxis_ShowGridLines(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.ShowGridLines = (global::System.Boolean)Value;
        }
        private object get_190_ChartAxis_EnableAutoIntervalOnZooming(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.EnableAutoIntervalOnZooming;
        }
        private void set_190_ChartAxis_EnableAutoIntervalOnZooming(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.EnableAutoIntervalOnZooming = (global::System.Boolean)Value;
        }
        private object get_191_ChartAxis_LabelStyle(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.LabelStyle;
        }
        private void set_191_ChartAxis_LabelStyle(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.LabelStyle = (global::Syncfusion.UI.Xaml.Charts.LabelStyle)Value;
        }
        private object get_192_ChartAxis_LabelTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.LabelTemplate;
        }
        private void set_192_ChartAxis_LabelTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.LabelTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_193_ChartAxis_CustomLabels(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.CustomLabels;
        }
        private object get_194_SfCartesianChart_SecondaryAxis(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfCartesianChart)instance;
            return that.SecondaryAxis;
        }
        private void set_194_SfCartesianChart_SecondaryAxis(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfCartesianChart)instance;
            that.SecondaryAxis = (global::Syncfusion.UI.Xaml.Charts.RangeAxisBase)Value;
        }
        private object get_195_SfCartesianChart_PlotAreaBorderBrush(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfCartesianChart)instance;
            return that.PlotAreaBorderBrush;
        }
        private void set_195_SfCartesianChart_PlotAreaBorderBrush(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfCartesianChart)instance;
            that.PlotAreaBorderBrush = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_196_SfCartesianChart_PlotAreaBorderThickness(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfCartesianChart)instance;
            return that.PlotAreaBorderThickness;
        }
        private void set_196_SfCartesianChart_PlotAreaBorderThickness(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfCartesianChart)instance;
            that.PlotAreaBorderThickness = (global::Microsoft.UI.Xaml.Thickness)Value;
        }
        private object get_197_SfCartesianChart_PlotAreaBackground(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfCartesianChart)instance;
            return that.PlotAreaBackground;
        }
        private void set_197_SfCartesianChart_PlotAreaBackground(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfCartesianChart)instance;
            that.PlotAreaBackground = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_198_SfCartesianChart_EnableSideBySideSeriesPlacement(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfCartesianChart)instance;
            return that.EnableSideBySideSeriesPlacement;
        }
        private void set_198_SfCartesianChart_EnableSideBySideSeriesPlacement(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfCartesianChart)instance;
            that.EnableSideBySideSeriesPlacement = (global::System.Boolean)Value;
        }
        private object get_199_ChartBase_SeriesClipRect(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            return that.SeriesClipRect;
        }
        private object get_200_ChartBase_VisibleSeries(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            return that.VisibleSeries;
        }
        private object get_201_ChartBase_Palette(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            return that.Palette;
        }
        private void set_201_ChartBase_Palette(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            that.Palette = (global::Syncfusion.UI.Xaml.Charts.ChartColorPalette)Value;
        }
        private object get_202_ChartBase_SelectedSeriesIndex(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            return that.SelectedSeriesIndex;
        }
        private void set_202_ChartBase_SelectedSeriesIndex(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            that.SelectedSeriesIndex = (global::System.Int32)Value;
        }
        private object get_203_ChartBase_Header(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            return that.Header;
        }
        private void set_203_ChartBase_Header(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_204_ChartBase_HorizontalHeaderAlignment(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            return that.HorizontalHeaderAlignment;
        }
        private void set_204_ChartBase_HorizontalHeaderAlignment(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            that.HorizontalHeaderAlignment = (global::Microsoft.UI.Xaml.HorizontalAlignment)Value;
        }
        private object get_205_ChartBase_VerticalHeaderAlignment(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            return that.VerticalHeaderAlignment;
        }
        private void set_205_ChartBase_VerticalHeaderAlignment(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            that.VerticalHeaderAlignment = (global::Microsoft.UI.Xaml.VerticalAlignment)Value;
        }
        private object get_206_ChartBase_ColorModel(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            return that.ColorModel;
        }
        private void set_206_ChartBase_ColorModel(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            that.ColorModel = (global::Syncfusion.UI.Xaml.Charts.ChartColorModel)Value;
        }
        private object get_207_ChartBase_Legend(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            return that.Legend;
        }
        private void set_207_ChartBase_Legend(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            that.Legend = (global::System.Object)Value;
        }
        private object get_208_ChartZoomPanBehavior_EnablePinchZooming(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior)instance;
            return that.EnablePinchZooming;
        }
        private void set_208_ChartZoomPanBehavior_EnablePinchZooming(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior)instance;
            that.EnablePinchZooming = (global::System.Boolean)Value;
        }
        private object get_209_ChartZoomPanBehavior_ZoomMode(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior)instance;
            return that.ZoomMode;
        }
        private void set_209_ChartZoomPanBehavior_ZoomMode(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior)instance;
            that.ZoomMode = (global::Syncfusion.UI.Xaml.Charts.ZoomMode)Value;
        }
        private object get_210_ChartZoomPanBehavior_EnableSelectionZooming(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior)instance;
            return that.EnableSelectionZooming;
        }
        private void set_210_ChartZoomPanBehavior_EnableSelectionZooming(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior)instance;
            that.EnableSelectionZooming = (global::System.Boolean)Value;
        }
        private object get_211_ChartZoomPanBehavior_ZoomRelativeToCursor(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior)instance;
            return that.ZoomRelativeToCursor;
        }
        private void set_211_ChartZoomPanBehavior_ZoomRelativeToCursor(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior)instance;
            that.ZoomRelativeToCursor = (global::System.Boolean)Value;
        }
        private object get_212_ChartZoomPanBehavior_EnableDirectionalZooming(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior)instance;
            return that.EnableDirectionalZooming;
        }
        private void set_212_ChartZoomPanBehavior_EnableDirectionalZooming(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior)instance;
            that.EnableDirectionalZooming = (global::System.Boolean)Value;
        }
        private object get_213_ChartZoomPanBehavior_EnablePanning(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior)instance;
            return that.EnablePanning;
        }
        private void set_213_ChartZoomPanBehavior_EnablePanning(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior)instance;
            that.EnablePanning = (global::System.Boolean)Value;
        }
        private object get_214_ChartZoomPanBehavior_StrokeThickness(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior)instance;
            return that.StrokeThickness;
        }
        private void set_214_ChartZoomPanBehavior_StrokeThickness(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior)instance;
            that.StrokeThickness = (global::System.Double)Value;
        }
        private object get_215_ChartZoomPanBehavior_MaximumZoomLevel(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior)instance;
            return that.MaximumZoomLevel;
        }
        private void set_215_ChartZoomPanBehavior_MaximumZoomLevel(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior)instance;
            that.MaximumZoomLevel = (global::System.Double)Value;
        }
        private object get_216_ChartZoomPanBehavior_Stroke(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior)instance;
            return that.Stroke;
        }
        private void set_216_ChartZoomPanBehavior_Stroke(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior)instance;
            that.Stroke = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_217_ChartZoomPanBehavior_Fill(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior)instance;
            return that.Fill;
        }
        private void set_217_ChartZoomPanBehavior_Fill(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior)instance;
            that.Fill = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_218_ChartZoomPanBehavior_EnableMouseWheelZooming(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior)instance;
            return that.EnableMouseWheelZooming;
        }
        private void set_218_ChartZoomPanBehavior_EnableMouseWheelZooming(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior)instance;
            that.EnableMouseWheelZooming = (global::System.Boolean)Value;
        }
        private object get_219_DoubleToObjectConverter_TrueValue(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            return that.TrueValue;
        }
        private void set_219_DoubleToObjectConverter_TrueValue(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            that.TrueValue = (global::System.Object)Value;
        }
        private object get_220_DoubleToObjectConverter_FalseValue(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            return that.FalseValue;
        }
        private void set_220_DoubleToObjectConverter_FalseValue(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            that.FalseValue = (global::System.Object)Value;
        }
        private object get_221_DoubleToObjectConverter_NullValue(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            return that.NullValue;
        }
        private void set_221_DoubleToObjectConverter_NullValue(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            that.NullValue = (global::System.Object)Value;
        }
        private object get_222_DoubleToObjectConverter_GreaterThan(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            return that.GreaterThan;
        }
        private void set_222_DoubleToObjectConverter_GreaterThan(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            that.GreaterThan = (global::System.Double)Value;
        }
        private object get_223_DoubleToObjectConverter_LessThan(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            return that.LessThan;
        }
        private void set_223_DoubleToObjectConverter_LessThan(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            that.LessThan = (global::System.Double)Value;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::GUI.GUI_XamlTypeInfo.XamlMember xamlMember = null;
            global::GUI.GUI_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneDisplayMode":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "PaneDisplayMode", "Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_NavigationView_PaneDisplayMode;
                xamlMember.Setter = set_0_NavigationView_PaneDisplayMode;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsPaneToggleButtonVisible":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "IsPaneToggleButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_NavigationView_IsPaneToggleButtonVisible;
                xamlMember.Setter = set_1_NavigationView_IsPaneToggleButtonVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsSettingsVisible":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "IsSettingsVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_NavigationView_IsSettingsVisible;
                xamlMember.Setter = set_2_NavigationView_IsSettingsVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsBackButtonVisible":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "IsBackButtonVisible", "Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_NavigationView_IsBackButtonVisible;
                xamlMember.Setter = set_3_NavigationView_IsBackButtonVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.CompactPaneLength":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "CompactPaneLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_NavigationView_CompactPaneLength;
                xamlMember.Setter = set_4_NavigationView_CompactPaneLength;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItems":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "MenuItems", "System.Collections.Generic.IList`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_NavigationView_MenuItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.AlwaysShowHeader":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "AlwaysShowHeader", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_NavigationView_AlwaysShowHeader;
                xamlMember.Setter = set_6_NavigationView_AlwaysShowHeader;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.AutoSuggestBox":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "AutoSuggestBox", "Microsoft.UI.Xaml.Controls.AutoSuggestBox");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_NavigationView_AutoSuggestBox;
                xamlMember.Setter = set_7_NavigationView_AutoSuggestBox;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.CompactModeThresholdWidth":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "CompactModeThresholdWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_NavigationView_CompactModeThresholdWidth;
                xamlMember.Setter = set_8_NavigationView_CompactModeThresholdWidth;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.ContentOverlay":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ContentOverlay", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_NavigationView_ContentOverlay;
                xamlMember.Setter = set_9_NavigationView_ContentOverlay;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.DisplayMode":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "DisplayMode", "Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_NavigationView_DisplayMode;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.ExpandedModeThresholdWidth":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ExpandedModeThresholdWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_NavigationView_ExpandedModeThresholdWidth;
                xamlMember.Setter = set_11_NavigationView_ExpandedModeThresholdWidth;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.FooterMenuItems":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "FooterMenuItems", "System.Collections.Generic.IList`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_NavigationView_FooterMenuItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.FooterMenuItemsSource":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "FooterMenuItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_NavigationView_FooterMenuItemsSource;
                xamlMember.Setter = set_13_NavigationView_FooterMenuItemsSource;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.Header":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_NavigationView_Header;
                xamlMember.Setter = set_14_NavigationView_Header;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.HeaderTemplate":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_NavigationView_HeaderTemplate;
                xamlMember.Setter = set_15_NavigationView_HeaderTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsBackEnabled":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "IsBackEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_NavigationView_IsBackEnabled;
                xamlMember.Setter = set_16_NavigationView_IsBackEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsPaneOpen":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "IsPaneOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_NavigationView_IsPaneOpen;
                xamlMember.Setter = set_17_NavigationView_IsPaneOpen;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsPaneVisible":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "IsPaneVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_NavigationView_IsPaneVisible;
                xamlMember.Setter = set_18_NavigationView_IsPaneVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsTitleBarAutoPaddingEnabled":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "IsTitleBarAutoPaddingEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_NavigationView_IsTitleBarAutoPaddingEnabled;
                xamlMember.Setter = set_19_NavigationView_IsTitleBarAutoPaddingEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemContainerStyle":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "MenuItemContainerStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_NavigationView_MenuItemContainerStyle;
                xamlMember.Setter = set_20_NavigationView_MenuItemContainerStyle;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemContainerStyleSelector":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "MenuItemContainerStyleSelector", "Microsoft.UI.Xaml.Controls.StyleSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_NavigationView_MenuItemContainerStyleSelector;
                xamlMember.Setter = set_21_NavigationView_MenuItemContainerStyleSelector;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemTemplate":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "MenuItemTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_NavigationView_MenuItemTemplate;
                xamlMember.Setter = set_22_NavigationView_MenuItemTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemTemplateSelector":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "MenuItemTemplateSelector", "Microsoft.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_NavigationView_MenuItemTemplateSelector;
                xamlMember.Setter = set_23_NavigationView_MenuItemTemplateSelector;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemsSource":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "MenuItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_NavigationView_MenuItemsSource;
                xamlMember.Setter = set_24_NavigationView_MenuItemsSource;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.OpenPaneLength":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "OpenPaneLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_NavigationView_OpenPaneLength;
                xamlMember.Setter = set_25_NavigationView_OpenPaneLength;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.OverflowLabelMode":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "OverflowLabelMode", "Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_NavigationView_OverflowLabelMode;
                xamlMember.Setter = set_26_NavigationView_OverflowLabelMode;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneCustomContent":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "PaneCustomContent", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_NavigationView_PaneCustomContent;
                xamlMember.Setter = set_27_NavigationView_PaneCustomContent;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneFooter":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "PaneFooter", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_NavigationView_PaneFooter;
                xamlMember.Setter = set_28_NavigationView_PaneFooter;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneHeader":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "PaneHeader", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_NavigationView_PaneHeader;
                xamlMember.Setter = set_29_NavigationView_PaneHeader;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneTitle":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "PaneTitle", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_NavigationView_PaneTitle;
                xamlMember.Setter = set_30_NavigationView_PaneTitle;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneToggleButtonStyle":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "PaneToggleButtonStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_NavigationView_PaneToggleButtonStyle;
                xamlMember.Setter = set_31_NavigationView_PaneToggleButtonStyle;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.SelectedItem":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "SelectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_NavigationView_SelectedItem;
                xamlMember.Setter = set_32_NavigationView_SelectedItem;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.SelectionFollowsFocus":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "SelectionFollowsFocus", "Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_NavigationView_SelectionFollowsFocus;
                xamlMember.Setter = set_33_NavigationView_SelectionFollowsFocus;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.SettingsItem":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "SettingsItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_NavigationView_SettingsItem;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.ShoulderNavigationEnabled":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ShoulderNavigationEnabled", "Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_NavigationView_ShoulderNavigationEnabled;
                xamlMember.Setter = set_35_NavigationView_ShoulderNavigationEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.TemplateSettings":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_NavigationView_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.Icon":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Icon", "Microsoft.UI.Xaml.Controls.IconElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_NavigationViewItem_Icon;
                xamlMember.Setter = set_37_NavigationViewItem_Icon;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.CompactPaneLength":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "CompactPaneLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_NavigationViewItem_CompactPaneLength;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.HasUnrealizedChildren":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "HasUnrealizedChildren", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_39_NavigationViewItem_HasUnrealizedChildren;
                xamlMember.Setter = set_39_NavigationViewItem_HasUnrealizedChildren;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.IsChildSelected":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "IsChildSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_40_NavigationViewItem_IsChildSelected;
                xamlMember.Setter = set_40_NavigationViewItem_IsChildSelected;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.IsExpanded":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_NavigationViewItem_IsExpanded;
                xamlMember.Setter = set_41_NavigationViewItem_IsExpanded;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.MenuItems":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "MenuItems", "System.Collections.Generic.IList`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_NavigationViewItem_MenuItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.MenuItemsSource":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "MenuItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_NavigationViewItem_MenuItemsSource;
                xamlMember.Setter = set_43_NavigationViewItem_MenuItemsSource;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.SelectsOnInvoked":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "SelectsOnInvoked", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_NavigationViewItem_SelectsOnInvoked;
                xamlMember.Setter = set_44_NavigationViewItem_SelectsOnInvoked;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItemBase.IsSelected":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItemBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_NavigationViewItemBase_IsSelected;
                xamlMember.Setter = set_45_NavigationViewItemBase_IsSelected;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.Value":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Value", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_NumberBox_Value;
                xamlMember.Setter = set_46_NumberBox_Value;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.SpinButtonPlacementMode":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "SpinButtonPlacementMode", "Microsoft.UI.Xaml.Controls.NumberBoxSpinButtonPlacementMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_47_NumberBox_SpinButtonPlacementMode;
                xamlMember.Setter = set_47_NumberBox_SpinButtonPlacementMode;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.SmallChange":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "SmallChange", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_NumberBox_SmallChange;
                xamlMember.Setter = set_48_NumberBox_SmallChange;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.AcceptsExpression":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "AcceptsExpression", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_49_NumberBox_AcceptsExpression;
                xamlMember.Setter = set_49_NumberBox_AcceptsExpression;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.Description":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Description", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_50_NumberBox_Description;
                xamlMember.Setter = set_50_NumberBox_Description;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.Header":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_51_NumberBox_Header;
                xamlMember.Setter = set_51_NumberBox_Header;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.HeaderTemplate":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_52_NumberBox_HeaderTemplate;
                xamlMember.Setter = set_52_NumberBox_HeaderTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.IsWrapEnabled":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "IsWrapEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_53_NumberBox_IsWrapEnabled;
                xamlMember.Setter = set_53_NumberBox_IsWrapEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.LargeChange":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "LargeChange", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_NumberBox_LargeChange;
                xamlMember.Setter = set_54_NumberBox_LargeChange;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.Maximum":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Maximum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_NumberBox_Maximum;
                xamlMember.Setter = set_55_NumberBox_Maximum;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.Minimum":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Minimum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_56_NumberBox_Minimum;
                xamlMember.Setter = set_56_NumberBox_Minimum;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.NumberFormatter":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "NumberFormatter", "Windows.Globalization.NumberFormatting.INumberFormatter2");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_NumberBox_NumberFormatter;
                xamlMember.Setter = set_57_NumberBox_NumberFormatter;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.PlaceholderText":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "PlaceholderText", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_NumberBox_PlaceholderText;
                xamlMember.Setter = set_58_NumberBox_PlaceholderText;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.PreventKeyboardDisplayOnProgrammaticFocus":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "PreventKeyboardDisplayOnProgrammaticFocus", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_NumberBox_PreventKeyboardDisplayOnProgrammaticFocus;
                xamlMember.Setter = set_59_NumberBox_PreventKeyboardDisplayOnProgrammaticFocus;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.SelectionFlyout":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "SelectionFlyout", "Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_60_NumberBox_SelectionFlyout;
                xamlMember.Setter = set_60_NumberBox_SelectionFlyout;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.SelectionHighlightColor":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "SelectionHighlightColor", "Microsoft.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_61_NumberBox_SelectionHighlightColor;
                xamlMember.Setter = set_61_NumberBox_SelectionHighlightColor;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.Text":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_62_NumberBox_Text;
                xamlMember.Setter = set_62_NumberBox_Text;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.TextReadingOrder":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "TextReadingOrder", "Microsoft.UI.Xaml.TextReadingOrder");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_63_NumberBox_TextReadingOrder;
                xamlMember.Setter = set_63_NumberBox_TextReadingOrder;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.ValidationMode":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ValidationMode", "Microsoft.UI.Xaml.Controls.NumberBoxValidationMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_64_NumberBox_ValidationMode;
                xamlMember.Setter = set_64_NumberBox_ValidationMode;
                break;
            case "Syncfusion.UI.Xaml.Editors.SfDropDownBase.Content":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.SfDropDownBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Content", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_65_SfDropDownBase_Content;
                xamlMember.Setter = set_65_SfDropDownBase_Content;
                break;
            case "Syncfusion.UI.Xaml.Editors.SfTimePicker.DisplayTimeFormat":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.SfTimePicker");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "DisplayTimeFormat", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_66_SfTimePicker_DisplayTimeFormat;
                xamlMember.Setter = set_66_SfTimePicker_DisplayTimeFormat;
                break;
            case "Syncfusion.UI.Xaml.Editors.SfTimePicker.SelectedTime":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.SfTimePicker");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "SelectedTime", "System.Nullable`1<System.DateTimeOffset>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_67_SfTimePicker_SelectedTime;
                xamlMember.Setter = set_67_SfTimePicker_SelectedTime;
                break;
            case "Syncfusion.UI.Xaml.Editors.SfTimePicker.MinTime":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.SfTimePicker");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "MinTime", "System.DateTimeOffset");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_68_SfTimePicker_MinTime;
                xamlMember.Setter = set_68_SfTimePicker_MinTime;
                break;
            case "Syncfusion.UI.Xaml.Editors.SfTimePicker.MaxTime":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.SfTimePicker");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "MaxTime", "System.DateTimeOffset");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_69_SfTimePicker_MaxTime;
                xamlMember.Setter = set_69_SfTimePicker_MaxTime;
                break;
            case "Syncfusion.UI.Xaml.Editors.SfTimePicker.VisibleItemsCount":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.SfTimePicker");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "VisibleItemsCount", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_70_SfTimePicker_VisibleItemsCount;
                xamlMember.Setter = set_70_SfTimePicker_VisibleItemsCount;
                break;
            case "Syncfusion.UI.Xaml.Editors.SfTimePicker.ShowColumnHeaders":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.SfTimePicker");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ShowColumnHeaders", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_71_SfTimePicker_ShowColumnHeaders;
                xamlMember.Setter = set_71_SfTimePicker_ShowColumnHeaders;
                break;
            case "Syncfusion.UI.Xaml.Editors.SfTimePicker.ItemWidth":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.SfTimePicker");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ItemWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_72_SfTimePicker_ItemWidth;
                xamlMember.Setter = set_72_SfTimePicker_ItemWidth;
                break;
            case "Syncfusion.UI.Xaml.Editors.SfTimePicker.MinItemWidth":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.SfTimePicker");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "MinItemWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_73_SfTimePicker_MinItemWidth;
                xamlMember.Setter = set_73_SfTimePicker_MinItemWidth;
                break;
            case "Syncfusion.UI.Xaml.Editors.SfTimePicker.MaxItemWidth":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.SfTimePicker");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "MaxItemWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_74_SfTimePicker_MaxItemWidth;
                xamlMember.Setter = set_74_SfTimePicker_MaxItemWidth;
                break;
            case "Syncfusion.UI.Xaml.Editors.SfTimePicker.ItemHeight":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.SfTimePicker");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ItemHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_75_SfTimePicker_ItemHeight;
                xamlMember.Setter = set_75_SfTimePicker_ItemHeight;
                break;
            case "Syncfusion.UI.Xaml.Editors.SfTimePicker.DropDownHeaderTemplate":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.SfTimePicker");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "DropDownHeaderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_76_SfTimePicker_DropDownHeaderTemplate;
                xamlMember.Setter = set_76_SfTimePicker_DropDownHeaderTemplate;
                break;
            case "Syncfusion.UI.Xaml.Editors.SfTimePicker.DropDownHeader":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.SfTimePicker");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "DropDownHeader", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_77_SfTimePicker_DropDownHeader;
                xamlMember.Setter = set_77_SfTimePicker_DropDownHeader;
                break;
            case "Syncfusion.UI.Xaml.Editors.SfTimePicker.ShowDropDownHeader":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.SfTimePicker");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ShowDropDownHeader", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_78_SfTimePicker_ShowDropDownHeader;
                xamlMember.Setter = set_78_SfTimePicker_ShowDropDownHeader;
                break;
            case "Syncfusion.UI.Xaml.Editors.SfTimePicker.PlaceholderText":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.SfTimePicker");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "PlaceholderText", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_79_SfTimePicker_PlaceholderText;
                xamlMember.Setter = set_79_SfTimePicker_PlaceholderText;
                break;
            case "Syncfusion.UI.Xaml.Editors.SfTimePicker.ItemTemplate":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.SfTimePicker");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ItemTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_80_SfTimePicker_ItemTemplate;
                xamlMember.Setter = set_80_SfTimePicker_ItemTemplate;
                break;
            case "Syncfusion.UI.Xaml.Editors.SfTimePicker.ItemContainerStyle":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.SfTimePicker");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ItemContainerStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_81_SfTimePicker_ItemContainerStyle;
                xamlMember.Setter = set_81_SfTimePicker_ItemContainerStyle;
                break;
            case "Syncfusion.UI.Xaml.Editors.SfTimePicker.ItemTemplateSelector":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.SfTimePicker");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ItemTemplateSelector", "Microsoft.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_82_SfTimePicker_ItemTemplateSelector;
                xamlMember.Setter = set_82_SfTimePicker_ItemTemplateSelector;
                break;
            case "Syncfusion.UI.Xaml.Editors.SfTimePicker.BlackoutTimes":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.SfTimePicker");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "BlackoutTimes", "Syncfusion.UI.Xaml.Editors.DateTimeOffsetCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_83_SfTimePicker_BlackoutTimes;
                xamlMember.Setter = set_83_SfTimePicker_BlackoutTimes;
                break;
            case "System.DateTimeOffset.Date":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTimeOffset");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Date", "System.DateTime");
                xamlMember.Getter = get_84_DateTimeOffset_Date;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTimeOffset.DateTime":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTimeOffset");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "DateTime", "System.DateTime");
                xamlMember.Getter = get_85_DateTimeOffset_DateTime;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTimeOffset.Day":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTimeOffset");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Day", "Int32");
                xamlMember.Getter = get_86_DateTimeOffset_Day;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTimeOffset.DayOfWeek":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTimeOffset");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "DayOfWeek", "System.DayOfWeek");
                xamlMember.Getter = get_87_DateTimeOffset_DayOfWeek;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTimeOffset.DayOfYear":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTimeOffset");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "DayOfYear", "Int32");
                xamlMember.Getter = get_88_DateTimeOffset_DayOfYear;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTimeOffset.Hour":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTimeOffset");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Hour", "Int32");
                xamlMember.Getter = get_89_DateTimeOffset_Hour;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTimeOffset.LocalDateTime":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTimeOffset");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "LocalDateTime", "System.DateTime");
                xamlMember.Getter = get_90_DateTimeOffset_LocalDateTime;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTimeOffset.Millisecond":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTimeOffset");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Millisecond", "Int32");
                xamlMember.Getter = get_91_DateTimeOffset_Millisecond;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTimeOffset.Minute":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTimeOffset");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Minute", "Int32");
                xamlMember.Getter = get_92_DateTimeOffset_Minute;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTimeOffset.Month":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTimeOffset");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Month", "Int32");
                xamlMember.Getter = get_93_DateTimeOffset_Month;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTimeOffset.Offset":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTimeOffset");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Offset", "TimeSpan");
                xamlMember.Getter = get_94_DateTimeOffset_Offset;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTimeOffset.Second":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTimeOffset");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Second", "Int32");
                xamlMember.Getter = get_95_DateTimeOffset_Second;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTimeOffset.Ticks":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTimeOffset");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Ticks", "Int64");
                xamlMember.Getter = get_96_DateTimeOffset_Ticks;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTimeOffset.TimeOfDay":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTimeOffset");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "TimeOfDay", "TimeSpan");
                xamlMember.Getter = get_97_DateTimeOffset_TimeOfDay;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTimeOffset.UtcDateTime":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTimeOffset");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "UtcDateTime", "System.DateTime");
                xamlMember.Getter = get_98_DateTimeOffset_UtcDateTime;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTimeOffset.UtcTicks":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTimeOffset");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "UtcTicks", "Int64");
                xamlMember.Getter = get_99_DateTimeOffset_UtcTicks;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTimeOffset.Year":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTimeOffset");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Year", "Int32");
                xamlMember.Getter = get_100_DateTimeOffset_Year;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Editors.SfTimePicker.ClockIdentifier":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.SfTimePicker");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ClockIdentifier", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_101_SfTimePicker_ClockIdentifier;
                xamlMember.Setter = set_101_SfTimePicker_ClockIdentifier;
                break;
            case "Syncfusion.UI.Xaml.Editors.DateTimePickerBase.AllowNull":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.DateTimePickerBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "AllowNull", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_102_DateTimePickerBase_AllowNull;
                xamlMember.Setter = set_102_DateTimePickerBase_AllowNull;
                break;
            case "Syncfusion.UI.Xaml.Editors.DateTimePickerBase.EditMode":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.DateTimePickerBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "EditMode", "Syncfusion.UI.Xaml.Editors.DateTimeEditMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_103_DateTimePickerBase_EditMode;
                xamlMember.Setter = set_103_DateTimePickerBase_EditMode;
                break;
            case "Syncfusion.UI.Xaml.Editors.DateTimePickerBase.ShowClearButton":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.DateTimePickerBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ShowClearButton", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_104_DateTimePickerBase_ShowClearButton;
                xamlMember.Setter = set_104_DateTimePickerBase_ShowClearButton;
                break;
            case "Syncfusion.UI.Xaml.Editors.DateTimePickerBase.Header":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.DateTimePickerBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_105_DateTimePickerBase_Header;
                xamlMember.Setter = set_105_DateTimePickerBase_Header;
                break;
            case "Syncfusion.UI.Xaml.Editors.DateTimePickerBase.HeaderTemplate":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.DateTimePickerBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_106_DateTimePickerBase_HeaderTemplate;
                xamlMember.Setter = set_106_DateTimePickerBase_HeaderTemplate;
                break;
            case "Syncfusion.UI.Xaml.Editors.DateTimePickerBase.Description":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.DateTimePickerBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Description", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_107_DateTimePickerBase_Description;
                xamlMember.Setter = set_107_DateTimePickerBase_Description;
                break;
            case "Syncfusion.UI.Xaml.Editors.SfDropDownBase.ContentTemplate":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.SfDropDownBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ContentTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_108_SfDropDownBase_ContentTemplate;
                xamlMember.Setter = set_108_SfDropDownBase_ContentTemplate;
                break;
            case "Syncfusion.UI.Xaml.Editors.SfDropDownBase.DropDownButtonTemplate":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.SfDropDownBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "DropDownButtonTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_109_SfDropDownBase_DropDownButtonTemplate;
                xamlMember.Setter = set_109_SfDropDownBase_DropDownButtonTemplate;
                break;
            case "Syncfusion.UI.Xaml.Editors.SfDropDownBase.DropDownHeight":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.SfDropDownBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "DropDownHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_110_SfDropDownBase_DropDownHeight;
                xamlMember.Setter = set_110_SfDropDownBase_DropDownHeight;
                break;
            case "Syncfusion.UI.Xaml.Editors.SfDropDownBase.DropDownMode":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.SfDropDownBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "DropDownMode", "Syncfusion.UI.Xaml.Editors.DropDownMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_111_SfDropDownBase_DropDownMode;
                xamlMember.Setter = set_111_SfDropDownBase_DropDownMode;
                break;
            case "Syncfusion.UI.Xaml.Editors.SfDropDownBase.DropDownPlacement":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.SfDropDownBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "DropDownPlacement", "Microsoft.UI.Xaml.Controls.Primitives.FlyoutPlacementMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_112_SfDropDownBase_DropDownPlacement;
                xamlMember.Setter = set_112_SfDropDownBase_DropDownPlacement;
                break;
            case "Syncfusion.UI.Xaml.Editors.SfDropDownBase.IsOpen":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.SfDropDownBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_113_SfDropDownBase_IsOpen;
                xamlMember.Setter = set_113_SfDropDownBase_IsOpen;
                break;
            case "Syncfusion.UI.Xaml.Editors.SfDropDownBase.ShowDropDownButton":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.SfDropDownBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ShowDropDownButton", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_114_SfDropDownBase_ShowDropDownButton;
                xamlMember.Setter = set_114_SfDropDownBase_ShowDropDownButton;
                break;
            case "Syncfusion.UI.Xaml.Editors.SfDropDownBase.ShowSubmitButtons":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Editors.SfDropDownBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ShowSubmitButtons", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_115_SfDropDownBase_ShowSubmitButtons;
                xamlMember.Setter = set_115_SfDropDownBase_ShowSubmitButtons;
                break;
            case "Syncfusion.UI.Xaml.Charts.SfCartesianChart.Series":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.SfCartesianChart");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Series", "Syncfusion.UI.Xaml.Charts.CartesianSeriesCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_116_SfCartesianChart_Series;
                xamlMember.Setter = set_116_SfCartesianChart_Series;
                break;
            case "Syncfusion.UI.Xaml.Charts.CartesianSeries.DataLabelSettings":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.CartesianSeries");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "DataLabelSettings", "Syncfusion.UI.Xaml.Charts.CartesianDataLabelSettings");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_117_CartesianSeries_DataLabelSettings;
                xamlMember.Setter = set_117_CartesianSeries_DataLabelSettings;
                break;
            case "Syncfusion.UI.Xaml.Charts.CartesianSeries.XRange":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.CartesianSeries");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "XRange", "Syncfusion.UI.Xaml.Charts.DoubleRange");
                xamlMember.Getter = get_118_CartesianSeries_XRange;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.CartesianSeries.YRange":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.CartesianSeries");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "YRange", "Syncfusion.UI.Xaml.Charts.DoubleRange");
                xamlMember.Getter = get_119_CartesianSeries_YRange;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.CartesianSeries.XAxis":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.CartesianSeries");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "XAxis", "Syncfusion.UI.Xaml.Charts.ChartAxisBase2D");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_120_CartesianSeries_XAxis;
                xamlMember.Setter = set_120_CartesianSeries_XAxis;
                break;
            case "Syncfusion.UI.Xaml.Charts.CartesianSeries.YAxis":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.CartesianSeries");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "YAxis", "Syncfusion.UI.Xaml.Charts.RangeAxisBase");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_121_CartesianSeries_YAxis;
                xamlMember.Setter = set_121_CartesianSeries_YAxis;
                break;
            case "Syncfusion.UI.Xaml.Charts.CartesianSeries.IsTransposed":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.CartesianSeries");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "IsTransposed", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_122_CartesianSeries_IsTransposed;
                xamlMember.Setter = set_122_CartesianSeries_IsTransposed;
                break;
            case "Syncfusion.UI.Xaml.Charts.CartesianSeries.ShowTrackballInfo":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.CartesianSeries");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ShowTrackballInfo", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_123_CartesianSeries_ShowTrackballInfo;
                xamlMember.Setter = set_123_CartesianSeries_ShowTrackballInfo;
                break;
            case "Syncfusion.UI.Xaml.Charts.DataMarkerSeries.ShowDataLabels":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.DataMarkerSeries");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ShowDataLabels", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_124_DataMarkerSeries_ShowDataLabels;
                xamlMember.Setter = set_124_DataMarkerSeries_ShowDataLabels;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeries.StrokeThickness":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeries");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "StrokeThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_125_ChartSeries_StrokeThickness;
                xamlMember.Setter = set_125_ChartSeries_StrokeThickness;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeries.Area":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeries");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Area", "Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember.Getter = get_126_ChartSeries_Area;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeries.Stroke":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeries");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Stroke", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_127_ChartSeries_Stroke;
                xamlMember.Setter = set_127_ChartSeries_Stroke;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.DataCount":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "DataCount", "Int32");
                xamlMember.Getter = get_128_ChartSeriesBase_DataCount;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.TooltipTemplate":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "TooltipTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_129_ChartSeriesBase_TooltipTemplate;
                xamlMember.Setter = set_129_ChartSeriesBase_TooltipTemplate;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.ShowTooltip":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ShowTooltip", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_130_ChartSeriesBase_ShowTooltip;
                xamlMember.Setter = set_130_ChartSeriesBase_ShowTooltip;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.ListenPropertyChange":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ListenPropertyChange", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_131_ChartSeriesBase_ListenPropertyChange;
                xamlMember.Setter = set_131_ChartSeriesBase_ListenPropertyChange;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.IsSeriesVisible":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "IsSeriesVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_132_ChartSeriesBase_IsSeriesVisible;
                xamlMember.Setter = set_132_ChartSeriesBase_IsSeriesVisible;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.Palette":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Palette", "Syncfusion.UI.Xaml.Charts.ChartColorPalette");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_133_ChartSeriesBase_Palette;
                xamlMember.Setter = set_133_ChartSeriesBase_Palette;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.ItemsSource":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_134_ChartSeriesBase_ItemsSource;
                xamlMember.Setter = set_134_ChartSeriesBase_ItemsSource;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.TrackballLabelTemplate":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "TrackballLabelTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_135_ChartSeriesBase_TrackballLabelTemplate;
                xamlMember.Setter = set_135_ChartSeriesBase_TrackballLabelTemplate;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.Interior":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Interior", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_136_ChartSeriesBase_Interior;
                xamlMember.Setter = set_136_ChartSeriesBase_Interior;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.Label":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Label", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_137_ChartSeriesBase_Label;
                xamlMember.Setter = set_137_ChartSeriesBase_Label;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.LegendIcon":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "LegendIcon", "Syncfusion.UI.Xaml.Charts.ChartLegendIcon");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_138_ChartSeriesBase_LegendIcon;
                xamlMember.Setter = set_138_ChartSeriesBase_LegendIcon;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.LegendIconTemplate":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "LegendIconTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_139_ChartSeriesBase_LegendIconTemplate;
                xamlMember.Setter = set_139_ChartSeriesBase_LegendIconTemplate;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.VisibilityOnLegend":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "VisibilityOnLegend", "Microsoft.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_140_ChartSeriesBase_VisibilityOnLegend;
                xamlMember.Setter = set_140_ChartSeriesBase_VisibilityOnLegend;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.ColorModel":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ColorModel", "Syncfusion.UI.Xaml.Charts.ChartColorModel");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_141_ChartSeriesBase_ColorModel;
                xamlMember.Setter = set_141_ChartSeriesBase_ColorModel;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.XBindingPath":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "XBindingPath", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_142_ChartSeriesBase_XBindingPath;
                xamlMember.Setter = set_142_ChartSeriesBase_XBindingPath;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.SegmentColorPath":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "SegmentColorPath", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_143_ChartSeriesBase_SegmentColorPath;
                xamlMember.Setter = set_143_ChartSeriesBase_SegmentColorPath;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.EnableAnimation":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "EnableAnimation", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_144_ChartSeriesBase_EnableAnimation;
                xamlMember.Setter = set_144_ChartSeriesBase_EnableAnimation;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.AnimationDuration":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "AnimationDuration", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_145_ChartSeriesBase_AnimationDuration;
                xamlMember.Setter = set_145_ChartSeriesBase_AnimationDuration;
                break;
            case "Syncfusion.UI.Xaml.Charts.SfCartesianChart.PrimaryAxis":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.SfCartesianChart");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "PrimaryAxis", "Syncfusion.UI.Xaml.Charts.ChartAxisBase2D");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_146_SfCartesianChart_PrimaryAxis;
                xamlMember.Setter = set_146_SfCartesianChart_PrimaryAxis;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBase.Behaviors":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Behaviors", "Syncfusion.UI.Xaml.Charts.ChartBehaviorsCollection");
                xamlMember.Getter = get_147_ChartBase_Behaviors;
                xamlMember.Setter = set_147_ChartBase_Behaviors;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBehavior.AdorningCanvas":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBehavior");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "AdorningCanvas", "Microsoft.UI.Xaml.Controls.Canvas");
                xamlMember.Getter = get_148_ChartBehavior_AdorningCanvas;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBehavior.BottomAdorningCanvas":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBehavior");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "BottomAdorningCanvas", "Microsoft.UI.Xaml.Controls.Canvas");
                xamlMember.Getter = get_149_ChartBehavior_BottomAdorningCanvas;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBehavior.ChartArea":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBehavior");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ChartArea", "Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember.Getter = get_150_ChartBehavior_ChartArea;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.SfCartesianChart.Axes":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.SfCartesianChart");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Axes", "Syncfusion.UI.Xaml.Charts.ChartAxisCollection");
                xamlMember.Getter = get_151_SfCartesianChart_Axes;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.IsLogarithmic":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "IsLogarithmic", "Boolean");
                xamlMember.Getter = get_152_ChartAxis_IsLogarithmic;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.ActualPlotOffset":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ActualPlotOffset", "Double");
                xamlMember.Getter = get_153_ChartAxis_ActualPlotOffset;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.MaximumLabels":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "MaximumLabels", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_154_ChartAxis_MaximumLabels;
                xamlMember.Setter = set_154_ChartAxis_MaximumLabels;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.VisibleRange":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "VisibleRange", "Syncfusion.UI.Xaml.Charts.DoubleRange");
                xamlMember.Getter = get_155_ChartAxis_VisibleRange;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.ArrangeRect":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ArrangeRect", "Windows.Foundation.Rect");
                xamlMember.Getter = get_156_ChartAxis_ArrangeRect;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.ContentPath":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ContentPath", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_157_ChartAxis_ContentPath;
                xamlMember.Setter = set_157_ChartAxis_ContentPath;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.LabelFormat":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "LabelFormat", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_158_ChartAxis_LabelFormat;
                xamlMember.Setter = set_158_ChartAxis_LabelFormat;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.PlotOffset":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "PlotOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_159_ChartAxis_PlotOffset;
                xamlMember.Setter = set_159_ChartAxis_PlotOffset;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.PlotOffsetStart":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "PlotOffsetStart", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_160_ChartAxis_PlotOffsetStart;
                xamlMember.Setter = set_160_ChartAxis_PlotOffsetStart;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.PlotOffsetEnd":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "PlotOffsetEnd", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_161_ChartAxis_PlotOffsetEnd;
                xamlMember.Setter = set_161_ChartAxis_PlotOffsetEnd;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.AxisLineOffset":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "AxisLineOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_162_ChartAxis_AxisLineOffset;
                xamlMember.Setter = set_162_ChartAxis_AxisLineOffset;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.LabelPosition":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "LabelPosition", "Syncfusion.UI.Xaml.Charts.AxisElementPosition");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_163_ChartAxis_LabelPosition;
                xamlMember.Setter = set_163_ChartAxis_LabelPosition;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.LabelSource":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "LabelSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_164_ChartAxis_LabelSource;
                xamlMember.Setter = set_164_ChartAxis_LabelSource;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.LabelIntersectAction":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "LabelIntersectAction", "Syncfusion.UI.Xaml.Charts.AxisLabelIntersectAction");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_165_ChartAxis_LabelIntersectAction;
                xamlMember.Setter = set_165_ChartAxis_LabelIntersectAction;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.LabelExtent":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "LabelExtent", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_166_ChartAxis_LabelExtent;
                xamlMember.Setter = set_166_ChartAxis_LabelExtent;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.LabelRotationAngle":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "LabelRotationAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_167_ChartAxis_LabelRotationAngle;
                xamlMember.Setter = set_167_ChartAxis_LabelRotationAngle;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.AxisLineStyle":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "AxisLineStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_168_ChartAxis_AxisLineStyle;
                xamlMember.Setter = set_168_ChartAxis_AxisLineStyle;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.OpposedPosition":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "OpposedPosition", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_169_ChartAxis_OpposedPosition;
                xamlMember.Setter = set_169_ChartAxis_OpposedPosition;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.DesiredIntervalsCount":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "DesiredIntervalsCount", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_170_ChartAxis_DesiredIntervalsCount;
                xamlMember.Setter = set_170_ChartAxis_DesiredIntervalsCount;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.Header":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_171_ChartAxis_Header;
                xamlMember.Setter = set_171_ChartAxis_Header;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.HeaderStyle":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "HeaderStyle", "Syncfusion.UI.Xaml.Charts.LabelStyle");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_172_ChartAxis_HeaderStyle;
                xamlMember.Setter = set_172_ChartAxis_HeaderStyle;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.HeaderTemplate":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_173_ChartAxis_HeaderTemplate;
                xamlMember.Setter = set_173_ChartAxis_HeaderTemplate;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.TickLineSize":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "TickLineSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_174_ChartAxis_TickLineSize;
                xamlMember.Setter = set_174_ChartAxis_TickLineSize;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.VisibleLabels":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "VisibleLabels", "System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartAxisLabel>");
                xamlMember.Getter = get_175_ChartAxis_VisibleLabels;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxisLabel.Content":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxisLabel");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Content", "Object");
                xamlMember.Getter = get_176_ChartAxisLabel_Content;
                xamlMember.Setter = set_176_ChartAxisLabel_Content;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxisLabel.Position":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxisLabel");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Position", "Double");
                xamlMember.Getter = get_177_ChartAxisLabel_Position;
                xamlMember.Setter = set_177_ChartAxisLabel_Position;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.IsInversed":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "IsInversed", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_178_ChartAxis_IsInversed;
                xamlMember.Setter = set_178_ChartAxis_IsInversed;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.TickLinesPosition":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "TickLinesPosition", "Syncfusion.UI.Xaml.Charts.AxisElementPosition");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_179_ChartAxis_TickLinesPosition;
                xamlMember.Setter = set_179_ChartAxis_TickLinesPosition;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.EdgeLabelsDrawingMode":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "EdgeLabelsDrawingMode", "Syncfusion.UI.Xaml.Charts.EdgeLabelsDrawingMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_180_ChartAxis_EdgeLabelsDrawingMode;
                xamlMember.Setter = set_180_ChartAxis_EdgeLabelsDrawingMode;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.EdgeLabelsVisibilityMode":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "EdgeLabelsVisibilityMode", "Syncfusion.UI.Xaml.Charts.EdgeLabelsVisibilityMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_181_ChartAxis_EdgeLabelsVisibilityMode;
                xamlMember.Setter = set_181_ChartAxis_EdgeLabelsVisibilityMode;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.MajorGridLineStyle":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "MajorGridLineStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_182_ChartAxis_MajorGridLineStyle;
                xamlMember.Setter = set_182_ChartAxis_MajorGridLineStyle;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.MinorGridLineStyle":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "MinorGridLineStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_183_ChartAxis_MinorGridLineStyle;
                xamlMember.Setter = set_183_ChartAxis_MinorGridLineStyle;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.MajorTickLineStyle":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "MajorTickLineStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_184_ChartAxis_MajorTickLineStyle;
                xamlMember.Setter = set_184_ChartAxis_MajorTickLineStyle;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.MinorTickLineStyle":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "MinorTickLineStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_185_ChartAxis_MinorTickLineStyle;
                xamlMember.Setter = set_185_ChartAxis_MinorTickLineStyle;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.ShowTrackballInfo":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ShowTrackballInfo", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_186_ChartAxis_ShowTrackballInfo;
                xamlMember.Setter = set_186_ChartAxis_ShowTrackballInfo;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.TrackballLabelTemplate":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "TrackballLabelTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_187_ChartAxis_TrackballLabelTemplate;
                xamlMember.Setter = set_187_ChartAxis_TrackballLabelTemplate;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.CrosshairLabelTemplate":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "CrosshairLabelTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_188_ChartAxis_CrosshairLabelTemplate;
                xamlMember.Setter = set_188_ChartAxis_CrosshairLabelTemplate;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.ShowGridLines":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ShowGridLines", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_189_ChartAxis_ShowGridLines;
                xamlMember.Setter = set_189_ChartAxis_ShowGridLines;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.EnableAutoIntervalOnZooming":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "EnableAutoIntervalOnZooming", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_190_ChartAxis_EnableAutoIntervalOnZooming;
                xamlMember.Setter = set_190_ChartAxis_EnableAutoIntervalOnZooming;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.LabelStyle":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "LabelStyle", "Syncfusion.UI.Xaml.Charts.LabelStyle");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_191_ChartAxis_LabelStyle;
                xamlMember.Setter = set_191_ChartAxis_LabelStyle;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.LabelTemplate":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "LabelTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_192_ChartAxis_LabelTemplate;
                xamlMember.Setter = set_192_ChartAxis_LabelTemplate;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.CustomLabels":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "CustomLabels", "Syncfusion.UI.Xaml.Charts.ChartAxisLabelCollection");
                xamlMember.Getter = get_193_ChartAxis_CustomLabels;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.SfCartesianChart.SecondaryAxis":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.SfCartesianChart");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "SecondaryAxis", "Syncfusion.UI.Xaml.Charts.RangeAxisBase");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_194_SfCartesianChart_SecondaryAxis;
                xamlMember.Setter = set_194_SfCartesianChart_SecondaryAxis;
                break;
            case "Syncfusion.UI.Xaml.Charts.SfCartesianChart.PlotAreaBorderBrush":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.SfCartesianChart");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "PlotAreaBorderBrush", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_195_SfCartesianChart_PlotAreaBorderBrush;
                xamlMember.Setter = set_195_SfCartesianChart_PlotAreaBorderBrush;
                break;
            case "Syncfusion.UI.Xaml.Charts.SfCartesianChart.PlotAreaBorderThickness":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.SfCartesianChart");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "PlotAreaBorderThickness", "Microsoft.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_196_SfCartesianChart_PlotAreaBorderThickness;
                xamlMember.Setter = set_196_SfCartesianChart_PlotAreaBorderThickness;
                break;
            case "Syncfusion.UI.Xaml.Charts.SfCartesianChart.PlotAreaBackground":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.SfCartesianChart");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "PlotAreaBackground", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_197_SfCartesianChart_PlotAreaBackground;
                xamlMember.Setter = set_197_SfCartesianChart_PlotAreaBackground;
                break;
            case "Syncfusion.UI.Xaml.Charts.SfCartesianChart.EnableSideBySideSeriesPlacement":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.SfCartesianChart");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "EnableSideBySideSeriesPlacement", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_198_SfCartesianChart_EnableSideBySideSeriesPlacement;
                xamlMember.Setter = set_198_SfCartesianChart_EnableSideBySideSeriesPlacement;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBase.SeriesClipRect":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "SeriesClipRect", "Windows.Foundation.Rect");
                xamlMember.Getter = get_199_ChartBase_SeriesClipRect;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBase.VisibleSeries":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "VisibleSeries", "Syncfusion.UI.Xaml.Charts.ChartVisibleSeriesCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_200_ChartBase_VisibleSeries;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBase.Palette":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Palette", "Syncfusion.UI.Xaml.Charts.ChartColorPalette");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_201_ChartBase_Palette;
                xamlMember.Setter = set_201_ChartBase_Palette;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBase.SelectedSeriesIndex":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "SelectedSeriesIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_202_ChartBase_SelectedSeriesIndex;
                xamlMember.Setter = set_202_ChartBase_SelectedSeriesIndex;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBase.Header":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_203_ChartBase_Header;
                xamlMember.Setter = set_203_ChartBase_Header;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBase.HorizontalHeaderAlignment":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "HorizontalHeaderAlignment", "Microsoft.UI.Xaml.HorizontalAlignment");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_204_ChartBase_HorizontalHeaderAlignment;
                xamlMember.Setter = set_204_ChartBase_HorizontalHeaderAlignment;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBase.VerticalHeaderAlignment":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "VerticalHeaderAlignment", "Microsoft.UI.Xaml.VerticalAlignment");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_205_ChartBase_VerticalHeaderAlignment;
                xamlMember.Setter = set_205_ChartBase_VerticalHeaderAlignment;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBase.ColorModel":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ColorModel", "Syncfusion.UI.Xaml.Charts.ChartColorModel");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_206_ChartBase_ColorModel;
                xamlMember.Setter = set_206_ChartBase_ColorModel;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBase.Legend":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Legend", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_207_ChartBase_Legend;
                xamlMember.Setter = set_207_ChartBase_Legend;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior.EnablePinchZooming":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "EnablePinchZooming", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_208_ChartZoomPanBehavior_EnablePinchZooming;
                xamlMember.Setter = set_208_ChartZoomPanBehavior_EnablePinchZooming;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior.ZoomMode":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ZoomMode", "Syncfusion.UI.Xaml.Charts.ZoomMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_209_ChartZoomPanBehavior_ZoomMode;
                xamlMember.Setter = set_209_ChartZoomPanBehavior_ZoomMode;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior.EnableSelectionZooming":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "EnableSelectionZooming", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_210_ChartZoomPanBehavior_EnableSelectionZooming;
                xamlMember.Setter = set_210_ChartZoomPanBehavior_EnableSelectionZooming;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior.ZoomRelativeToCursor":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "ZoomRelativeToCursor", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_211_ChartZoomPanBehavior_ZoomRelativeToCursor;
                xamlMember.Setter = set_211_ChartZoomPanBehavior_ZoomRelativeToCursor;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior.EnableDirectionalZooming":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "EnableDirectionalZooming", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_212_ChartZoomPanBehavior_EnableDirectionalZooming;
                xamlMember.Setter = set_212_ChartZoomPanBehavior_EnableDirectionalZooming;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior.EnablePanning":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "EnablePanning", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_213_ChartZoomPanBehavior_EnablePanning;
                xamlMember.Setter = set_213_ChartZoomPanBehavior_EnablePanning;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior.StrokeThickness":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "StrokeThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_214_ChartZoomPanBehavior_StrokeThickness;
                xamlMember.Setter = set_214_ChartZoomPanBehavior_StrokeThickness;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior.MaximumZoomLevel":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "MaximumZoomLevel", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_215_ChartZoomPanBehavior_MaximumZoomLevel;
                xamlMember.Setter = set_215_ChartZoomPanBehavior_MaximumZoomLevel;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior.Stroke":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Stroke", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_216_ChartZoomPanBehavior_Stroke;
                xamlMember.Setter = set_216_ChartZoomPanBehavior_Stroke;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior.Fill":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "Fill", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_217_ChartZoomPanBehavior_Fill;
                xamlMember.Setter = set_217_ChartZoomPanBehavior_Fill;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior.EnableMouseWheelZooming":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartZoomPanBehavior");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "EnableMouseWheelZooming", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_218_ChartZoomPanBehavior_EnableMouseWheelZooming;
                xamlMember.Setter = set_218_ChartZoomPanBehavior_EnableMouseWheelZooming;
                break;
            case "Syncfusion.UI.Xaml.Core.DoubleToObjectConverter.TrueValue":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Core.DoubleToObjectConverter");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "TrueValue", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_219_DoubleToObjectConverter_TrueValue;
                xamlMember.Setter = set_219_DoubleToObjectConverter_TrueValue;
                break;
            case "Syncfusion.UI.Xaml.Core.DoubleToObjectConverter.FalseValue":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Core.DoubleToObjectConverter");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "FalseValue", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_220_DoubleToObjectConverter_FalseValue;
                xamlMember.Setter = set_220_DoubleToObjectConverter_FalseValue;
                break;
            case "Syncfusion.UI.Xaml.Core.DoubleToObjectConverter.NullValue":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Core.DoubleToObjectConverter");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "NullValue", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_221_DoubleToObjectConverter_NullValue;
                xamlMember.Setter = set_221_DoubleToObjectConverter_NullValue;
                break;
            case "Syncfusion.UI.Xaml.Core.DoubleToObjectConverter.GreaterThan":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Core.DoubleToObjectConverter");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "GreaterThan", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_222_DoubleToObjectConverter_GreaterThan;
                xamlMember.Setter = set_222_DoubleToObjectConverter_GreaterThan;
                break;
            case "Syncfusion.UI.Xaml.Core.DoubleToObjectConverter.LessThan":
                userType = (global::GUI.GUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Core.DoubleToObjectConverter");
                xamlMember = new global::GUI.GUI_XamlTypeInfo.XamlMember(this, "LessThan", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_223_DoubleToObjectConverter_LessThan;
                xamlMember.Setter = set_223_DoubleToObjectConverter_LessThan;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);
    internal delegate object BoxInstanceMethod(object instance);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::GUI.GUI_XamlTypeInfo.XamlSystemBaseType
        , global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        global::GUI.GUI_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Microsoft.UI.Xaml.Markup.IXamlType _baseType;
        global::Microsoft.UI.Xaml.Markup.IXamlType _boxedType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::GUI.GUI_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Microsoft.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }
        override public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { return _boxedType; } }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (BoxedType != null)
            {
                return BoxInstance(BoxedType.CreateFromString(input));
            }

            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }
        public BoxInstanceMethod BoxInstance {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void SetBoxedType(global::Microsoft.UI.Xaml.Markup.IXamlType boxedType)
        {
            _boxedType = boxedType;
        }

        public object BoxType<T>(object instance) where T: struct
        {
            T unwrapped = (T)instance;
            return new global::System.Nullable<T>(unwrapped);
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Microsoft.UI.Xaml.Markup.IXamlMember
    {
        global::GUI.GUI_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::GUI.GUI_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Microsoft.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Microsoft.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

